// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\0"+
    "\1\4\10\0\1\5\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\0\1\23\5\0\32\24\4\0\1\25\1\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\24\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\0\1\60\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\1\1\3\1\4\23\5\1\6"+
    "\1\7\1\0\1\10\24\0\1\11\1\0\15\5\2\12"+
    "\42\5\30\0\1\3\6\5\1\13\26\5\1\14\17\5"+
    "\1\12\5\5\1\15\2\5\6\0\1\16\13\0\1\17"+
    "\5\0\24\5\1\20\41\5\11\0\1\21\1\22\11\0"+
    "\1\23\1\24\53\5\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\5\1\36\3\5\1\37"+
    "\2\5\7\0\1\40\10\0\1\41\1\0\30\5\1\42"+
    "\11\5\1\43\6\5\1\44\1\5\1\45\2\5\1\46"+
    "\2\5\1\47\1\50\1\51\2\5\1\0\1\52\1\53"+
    "\2\0\1\54\1\55\2\0\1\56\1\57\2\0\1\60"+
    "\1\61\1\0\5\5\1\62\2\5\1\63\13\5\1\64"+
    "\33\5\1\65\1\66\1\67\2\0\1\70\1\71\1\72"+
    "\2\0\6\5\1\73\1\74\27\5\1\75\22\5\1\76"+
    "\1\0\1\77\1\0\7\5\1\100\1\101\1\102\24\5"+
    "\1\103\27\5\2\0\14\5\1\104\5\5\1\105\12\5"+
    "\1\106\2\5\1\107\16\5\1\110\1\5\1\111\1\112"+
    "\5\5\1\113\4\5\1\114\3\5\1\115\16\5\1\116"+
    "\14\5\1\117\1\120\3\5\1\121\5\5\1\122\10\5"+
    "\1\123\2\5\1\124\3\5\1\125\2\5\1\126\7\5"+
    "\1\127\5\5\1\130\22\5\1\131\22\5\1\132\2\5"+
    "\1\133\15\5\1\134\7\5\1\135\13\5\1\136\21\5"+
    "\1\137\4\5\1\140\1\141\2\5\1\142\1\5\1\143"+
    "\1\5\1\144\26\5\1\145\1\146\10\5\1\147\1\5"+
    "\1\150\1\5\1\151\7\5\1\152\1\5\1\153\1\154"+
    "\1\5\1\155\1\5\1\156\6\5\1\157\1\5\1\160"+
    "\1\5\1\161\1\5\1\162\4\5\1\163\1\5\1\164"+
    "\1\165\1\166\3\5\1\167\5\5\1\170\2\5\1\171"+
    "\1\5\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[932];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\61\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\61\0\61\0\223\0\61"+
    "\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0188\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u0930"+
    "\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u0188\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u0188\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\61\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\61\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584"+
    "\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c"+
    "\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894"+
    "\0\u28c5\0\u28f6\0\u0188\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb"+
    "\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83"+
    "\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b"+
    "\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\61\0\61\0\u3131"+
    "\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9"+
    "\0\61\0\61\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df"+
    "\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567"+
    "\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef"+
    "\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877"+
    "\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff"+
    "\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u0188\0\u0188"+
    "\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u3b56\0\u3b87"+
    "\0\u0188\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde"+
    "\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\61\0\u3e35"+
    "\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\61"+
    "\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114"+
    "\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c"+
    "\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424"+
    "\0\u4455\0\u0188\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b"+
    "\0\u45ac\0\u45dd\0\u460e\0\u0188\0\u463f\0\u4670\0\u46a1\0\u46d2"+
    "\0\u4703\0\u4734\0\u0188\0\u4765\0\u0188\0\u4796\0\u47c7\0\u47f8"+
    "\0\u4829\0\u485a\0\u0188\0\u0188\0\u0188\0\u488b\0\u48bc\0\u48ed"+
    "\0\u491e\0\61\0\u494f\0\u4980\0\61\0\61\0\u49b1\0\u49e2"+
    "\0\u4a13\0\61\0\u4a44\0\u4a75\0\61\0\61\0\u4aa6\0\u4ad7"+
    "\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u0188\0\u4bcc\0\u4bfd\0\u0188"+
    "\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85"+
    "\0\u4db6\0\u4de7\0\u4e18\0\u0188\0\u4e49\0\u4e7a\0\u4eab\0\u4edc"+
    "\0\u4f0d\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064"+
    "\0\u5095\0\u50c6\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec"+
    "\0\u521d\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u5343\0\61"+
    "\0\61\0\61\0\u5374\0\u53a5\0\61\0\61\0\61\0\u53d6"+
    "\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb\0\u54fc\0\u552d\0\u0188"+
    "\0\u555e\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684\0\u56b5"+
    "\0\u56e6\0\u5717\0\u5748\0\u5779\0\u57aa\0\u57db\0\u580c\0\u583d"+
    "\0\u586e\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963\0\u5994\0\u59c5"+
    "\0\u0188\0\u59f6\0\u5a27\0\u5a58\0\u5a89\0\u5aba\0\u5aeb\0\u5b1c"+
    "\0\u5b4d\0\u5b7e\0\u5baf\0\u5be0\0\u5c11\0\u5c42\0\u5c73\0\u5ca4"+
    "\0\u5cd5\0\u5d06\0\u5d37\0\61\0\u5d68\0\61\0\u5d99\0\u5dca"+
    "\0\u5dfb\0\u5e2c\0\u5e5d\0\u5e8e\0\u5ebf\0\u5ef0\0\u0188\0\u0188"+
    "\0\u0188\0\u5f21\0\u5f52\0\u5f83\0\u5fb4\0\u5fe5\0\u6016\0\u6047"+
    "\0\u6078\0\u60a9\0\u60da\0\u610b\0\u613c\0\u616d\0\u619e\0\u61cf"+
    "\0\u6200\0\u6231\0\u6262\0\u6293\0\u62c4\0\u0188\0\u62f5\0\u6326"+
    "\0\u6357\0\u6388\0\u63b9\0\u63ea\0\u641b\0\u644c\0\u647d\0\u64ae"+
    "\0\u64df\0\u6510\0\u6541\0\u6572\0\u65a3\0\u65d4\0\u6605\0\u6636"+
    "\0\u6667\0\u6698\0\u66c9\0\u66fa\0\u672b\0\u675c\0\u678d\0\u67be"+
    "\0\u67ef\0\u6820\0\u6851\0\u6882\0\u68b3\0\u68e4\0\u6915\0\u6946"+
    "\0\u6977\0\u69a8\0\u69d9\0\u0188\0\u6a0a\0\u6a3b\0\u6a6c\0\u6a9d"+
    "\0\u6ace\0\u0188\0\u6aff\0\u6b30\0\u6b61\0\u6b92\0\u6bc3\0\u6bf4"+
    "\0\u6c25\0\u6c56\0\u6c87\0\u6cb8\0\u0188\0\u6ce9\0\u6d1a\0\u0188"+
    "\0\u6d4b\0\u6d7c\0\u6dad\0\u6dde\0\u6e0f\0\u6e40\0\u6e71\0\u6ea2"+
    "\0\u6ed3\0\u6f04\0\u6f35\0\u6f66\0\u6f97\0\u6fc8\0\u0188\0\u6ff9"+
    "\0\61\0\61\0\u702a\0\u705b\0\u708c\0\u70bd\0\u70ee\0\u0188"+
    "\0\u711f\0\u7150\0\u7181\0\u71b2\0\u0188\0\u71e3\0\u7214\0\u7245"+
    "\0\u0188\0\u7276\0\u72a7\0\u72d8\0\u7309\0\u733a\0\u736b\0\u739c"+
    "\0\u73cd\0\u73fe\0\u742f\0\u7460\0\u7491\0\u74c2\0\u74f3\0\u0188"+
    "\0\u7524\0\u7555\0\u7586\0\u75b7\0\u75e8\0\u7619\0\u764a\0\u767b"+
    "\0\u76ac\0\u76dd\0\u770e\0\u773f\0\u0188\0\u0188\0\u7770\0\u77a1"+
    "\0\u77d2\0\u0188\0\u7803\0\u7834\0\u7865\0\u7896\0\u78c7\0\u0188"+
    "\0\u78f8\0\u7929\0\u795a\0\u798b\0\u79bc\0\u79ed\0\u7a1e\0\u7a4f"+
    "\0\u0188\0\u7a80\0\u7ab1\0\u0188\0\u7ae2\0\u7b13\0\u7b44\0\u7b75"+
    "\0\u7ba6\0\u7bd7\0\u7c08\0\u7c39\0\u7c6a\0\u7c9b\0\u7ccc\0\u7cfd"+
    "\0\u7d2e\0\u7d5f\0\u0188\0\u7d90\0\u7dc1\0\u7df2\0\u7e23\0\u7e54"+
    "\0\u0188\0\u7e85\0\u7eb6\0\u7ee7\0\u7f18\0\u7f49\0\u7f7a\0\u7fab"+
    "\0\u7fdc\0\u800d\0\u803e\0\u806f\0\u80a0\0\u80d1\0\u8102\0\u8133"+
    "\0\u8164\0\u8195\0\u81c6\0\u81f7\0\u8228\0\u8259\0\u828a\0\u82bb"+
    "\0\u82ec\0\u831d\0\u834e\0\u837f\0\u83b0\0\u83e1\0\u8412\0\u8443"+
    "\0\u8474\0\u84a5\0\u84d6\0\u8507\0\u8538\0\u8569\0\u0188\0\u859a"+
    "\0\u85cb\0\u0188\0\u85fc\0\u862d\0\u865e\0\u868f\0\u86c0\0\u86f1"+
    "\0\u8722\0\u8753\0\u8784\0\u87b5\0\u87e6\0\u8817\0\u8848\0\u0188"+
    "\0\u8879\0\u88aa\0\u88db\0\u890c\0\u893d\0\u896e\0\u899f\0\u0188"+
    "\0\u89d0\0\u8a01\0\u8a32\0\u8a63\0\u8a94\0\u8ac5\0\u8af6\0\u8b27"+
    "\0\u8b58\0\u8b89\0\u8bba\0\u0188\0\u8beb\0\u8c1c\0\u8c4d\0\u8c7e"+
    "\0\u8caf\0\u8ce0\0\u8d11\0\u8d42\0\u8d73\0\u8da4\0\u8dd5\0\u8e06"+
    "\0\u8e37\0\u8e68\0\u8e99\0\u8eca\0\u8efb\0\u0188\0\u8f2c\0\u8f5d"+
    "\0\u8f8e\0\u8fbf\0\u0188\0\u0188\0\u8ff0\0\u9021\0\u0188\0\u9052"+
    "\0\u0188\0\u9083\0\u0188\0\u90b4\0\u90e5\0\u9116\0\u9147\0\u9178"+
    "\0\u91a9\0\u91da\0\u920b\0\u923c\0\u926d\0\u929e\0\u92cf\0\u9300"+
    "\0\u9331\0\u9362\0\u9393\0\u93c4\0\u93f5\0\u9426\0\u9457\0\u9488"+
    "\0\u94b9\0\u0188\0\u0188\0\u94ea\0\u951b\0\u954c\0\u957d\0\u95ae"+
    "\0\u95df\0\u9610\0\u9641\0\u0188\0\u9672\0\u0188\0\u96a3\0\u0188"+
    "\0\u96d4\0\u9705\0\u9736\0\u9767\0\u9798\0\u97c9\0\u97fa\0\u0188"+
    "\0\u982b\0\u0188\0\u0188\0\u985c\0\u0188\0\u988d\0\u0188\0\u98be"+
    "\0\u98ef\0\u9920\0\u9951\0\u9982\0\u99b3\0\u0188\0\u99e4\0\u0188"+
    "\0\u9a15\0\u0188\0\u9a46\0\u0188\0\u9a77\0\u9aa8\0\u9ad9\0\u9b0a"+
    "\0\u0188\0\u9b3b\0\u0188\0\u0188\0\u0188\0\u9b6c\0\u9b9d\0\u9bce"+
    "\0\u0188\0\u9bff\0\u9c30\0\u9c61\0\u9c92\0\u9cc3\0\u0188\0\u9cf4"+
    "\0\u9d25\0\u0188\0\u9d56\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[932];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\2\1\7"+
    "\12\10\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\12\1\24\1\25\1\26"+
    "\1\12\1\27\1\12\1\30\1\31\1\32\1\33\1\34"+
    "\4\12\1\35\1\36\62\0\2\3\56\0\4\37\1\40"+
    "\54\37\11\0\12\10\3\0\1\41\1\0\1\42\1\43"+
    "\1\44\1\45\5\0\1\46\2\0\1\47\1\0\1\50"+
    "\1\0\1\51\1\52\20\0\12\10\3\0\1\53\1\0"+
    "\1\54\1\55\1\56\1\57\5\0\1\60\2\0\1\61"+
    "\1\0\1\62\1\0\1\63\1\64\17\0\1\65\57\0"+
    "\1\66\1\0\12\10\47\0\12\12\1\0\33\12\13\0"+
    "\12\12\1\0\14\12\1\67\1\12\1\70\6\12\1\71"+
    "\5\12\13\0\12\12\1\0\25\12\1\72\5\12\13\0"+
    "\12\12\1\0\17\12\1\73\4\12\1\74\6\12\13\0"+
    "\12\12\1\0\6\12\1\75\10\12\1\76\13\12\13\0"+
    "\12\12\1\0\4\12\1\77\11\12\1\100\2\12\1\101"+
    "\1\12\1\102\4\12\1\103\2\12\13\0\1\12\1\104"+
    "\10\105\1\0\20\12\1\106\12\12\13\0\12\12\1\0"+
    "\2\12\1\107\30\12\13\0\12\12\1\0\2\12\1\110"+
    "\30\12\13\0\12\12\1\0\5\12\1\111\25\12\13\0"+
    "\12\12\1\0\2\12\1\112\3\12\1\113\3\12\1\114"+
    "\20\12\13\0\12\12\1\0\6\12\1\115\3\12\1\116"+
    "\4\12\1\117\3\12\1\120\1\12\1\121\1\12\1\122"+
    "\3\12\13\0\12\12\1\0\17\12\1\123\13\12\13\0"+
    "\12\12\1\0\6\12\1\124\3\12\1\125\4\12\1\126"+
    "\13\12\13\0\12\12\1\0\2\12\1\127\3\12\1\130"+
    "\3\12\1\131\4\12\1\132\13\12\13\0\12\12\1\0"+
    "\2\12\1\133\3\12\1\134\2\12\1\135\2\12\1\136"+
    "\3\12\1\137\12\12\13\0\12\12\1\0\2\12\1\140"+
    "\3\12\1\141\10\12\1\142\2\12\1\143\10\12\13\0"+
    "\12\12\1\0\20\12\1\144\12\12\13\0\12\12\1\0"+
    "\2\12\1\145\7\12\1\146\4\12\1\147\13\12\36\0"+
    "\1\150\13\0\1\151\53\0\1\152\53\0\1\153\71\0"+
    "\1\154\57\0\1\155\50\0\1\156\62\0\1\157\10\0"+
    "\1\160\41\0\1\161\74\0\1\162\61\0\1\163\45\0"+
    "\1\164\13\0\1\165\53\0\1\166\53\0\1\167\71\0"+
    "\1\170\57\0\1\171\50\0\1\172\62\0\1\173\10\0"+
    "\1\174\41\0\1\175\74\0\1\176\61\0\1\177\11\0"+
    "\2\65\1\0\56\65\11\0\12\200\47\0\12\12\1\0"+
    "\24\12\1\105\6\12\13\0\12\12\1\0\12\12\1\201"+
    "\12\12\1\202\5\12\13\0\12\12\1\0\24\12\1\203"+
    "\6\12\13\0\12\12\1\0\7\12\1\204\23\12\13\0"+
    "\12\12\1\0\15\12\1\205\1\206\3\12\1\207\10\12"+
    "\13\0\12\12\1\0\22\12\1\210\10\12\13\0\12\12"+
    "\1\0\14\12\1\211\16\12\13\0\12\12\1\0\27\12"+
    "\1\212\3\12\13\0\12\12\1\0\17\12\1\213\13\12"+
    "\13\0\12\12\1\0\24\12\1\214\6\12\13\0\12\12"+
    "\1\0\25\12\1\215\5\12\13\0\12\12\1\0\4\12"+
    "\1\216\13\12\1\217\3\12\1\220\6\12\13\0\12\12"+
    "\1\0\20\12\1\221\12\12\13\0\3\105\7\12\1\0"+
    "\33\12\13\0\12\12\1\0\23\12\1\222\7\12\13\0"+
    "\12\12\1\0\15\12\1\223\15\12\13\0\12\12\1\0"+
    "\3\12\1\224\27\12\13\0\12\12\1\0\1\12\1\225"+
    "\31\12\13\0\12\12\1\0\24\12\1\226\6\12\13\0"+
    "\12\12\1\0\7\12\1\227\23\12\13\0\12\12\1\0"+
    "\15\12\1\230\15\12\13\0\12\12\1\0\16\12\1\231"+
    "\14\12\13\0\12\12\1\0\22\12\1\232\10\12\13\0"+
    "\12\12\1\0\5\12\1\233\15\12\1\234\1\12\1\235"+
    "\5\12\13\0\12\12\1\0\10\12\1\236\22\12\13\0"+
    "\12\12\1\0\24\12\1\237\6\12\13\0\12\12\1\0"+
    "\11\12\1\240\21\12\13\0\12\12\1\0\24\12\1\241"+
    "\6\12\13\0\12\12\1\0\22\12\1\242\10\12\13\0"+
    "\12\12\1\0\16\12\1\243\14\12\13\0\12\12\1\0"+
    "\16\12\1\244\14\12\13\0\12\12\1\0\5\12\1\245"+
    "\25\12\13\0\12\12\1\0\4\12\1\246\26\12\13\0"+
    "\12\12\1\0\10\12\1\247\22\12\13\0\12\12\1\0"+
    "\24\12\1\250\6\12\13\0\12\12\1\0\14\12\1\251"+
    "\16\12\13\0\12\12\1\0\16\12\1\252\14\12\13\0"+
    "\12\12\1\0\12\12\1\253\20\12\13\0\12\12\1\0"+
    "\17\12\1\254\13\12\13\0\12\12\1\0\2\12\1\255"+
    "\30\12\13\0\12\12\1\0\3\12\1\256\11\12\1\257"+
    "\15\12\13\0\12\12\1\0\4\12\1\260\26\12\13\0"+
    "\12\12\1\0\10\12\1\261\22\12\13\0\12\12\1\0"+
    "\2\12\1\262\30\12\13\0\12\12\1\0\2\12\1\263"+
    "\30\12\13\0\12\12\1\0\22\12\1\264\10\12\13\0"+
    "\12\12\1\0\23\12\1\265\7\12\13\0\12\12\1\0"+
    "\14\12\1\266\16\12\30\0\1\267\60\0\1\270\100\0"+
    "\1\271\60\0\1\272\57\0\1\273\45\0\1\274\56\0"+
    "\1\275\56\0\1\276\72\0\1\277\50\0\1\300\56\0"+
    "\1\301\60\0\1\302\60\0\1\303\60\0\1\304\100\0"+
    "\1\305\60\0\1\306\57\0\1\307\45\0\1\310\56\0"+
    "\1\311\56\0\1\312\72\0\1\313\50\0\1\314\56\0"+
    "\1\315\60\0\1\316\43\0\12\12\1\0\15\12\1\317"+
    "\15\12\13\0\12\12\1\0\16\12\1\320\14\12\13\0"+
    "\12\12\1\0\17\12\1\321\13\12\13\0\12\12\1\0"+
    "\7\12\1\322\23\12\13\0\12\12\1\0\20\12\1\323"+
    "\12\12\13\0\12\12\1\0\23\12\1\324\1\325\6\12"+
    "\13\0\12\12\1\0\1\12\1\326\20\12\1\327\10\12"+
    "\13\0\12\12\1\0\14\12\1\105\16\12\13\0\12\12"+
    "\1\0\2\12\1\330\30\12\13\0\12\12\1\0\16\12"+
    "\1\144\14\12\13\0\12\12\1\0\16\12\1\331\14\12"+
    "\13\0\12\12\1\0\6\12\1\332\24\12\13\0\12\12"+
    "\1\0\2\12\1\333\7\12\1\334\20\12\13\0\12\12"+
    "\1\0\2\12\1\335\30\12\13\0\12\12\1\0\2\12"+
    "\1\336\3\12\1\337\24\12\13\0\12\12\1\0\12\12"+
    "\1\340\20\12\13\0\12\12\1\0\6\12\1\341\24\12"+
    "\13\0\12\12\1\0\1\12\1\342\31\12\13\0\12\12"+
    "\1\0\2\12\1\343\30\12\13\0\12\12\1\0\12\12"+
    "\1\344\20\12\13\0\12\12\1\0\12\12\1\345\20\12"+
    "\13\0\12\12\1\0\6\12\1\346\24\12\13\0\12\12"+
    "\1\0\24\12\1\144\6\12\13\0\12\12\1\0\20\12"+
    "\1\347\12\12\13\0\12\12\1\0\23\12\1\350\7\12"+
    "\13\0\12\12\1\0\2\12\1\351\30\12\13\0\12\12"+
    "\1\0\6\12\1\352\10\12\1\353\13\12\13\0\12\12"+
    "\1\0\24\12\1\354\6\12\13\0\12\12\1\0\23\12"+
    "\1\355\7\12\13\0\12\12\1\0\2\12\1\356\30\12"+
    "\13\0\12\12\1\0\6\12\1\357\24\12\13\0\12\12"+
    "\1\0\12\12\1\360\20\12\13\0\12\12\1\0\7\12"+
    "\1\361\13\12\1\362\7\12\13\0\12\12\1\0\10\12"+
    "\1\363\22\12\13\0\12\12\1\0\24\12\1\364\6\12"+
    "\13\0\12\12\1\0\2\12\1\365\30\12\13\0\12\12"+
    "\1\0\25\12\1\366\5\12\13\0\12\12\1\0\11\12"+
    "\1\227\21\12\13\0\12\12\1\0\2\12\1\367\30\12"+
    "\13\0\12\12\1\0\26\12\1\370\4\12\13\0\12\12"+
    "\1\0\23\12\1\371\7\12\13\0\12\12\1\0\7\12"+
    "\1\67\23\12\13\0\12\12\1\0\24\12\1\372\6\12"+
    "\13\0\12\12\1\0\4\12\1\373\26\12\13\0\12\12"+
    "\1\0\1\12\1\374\31\12\13\0\12\12\1\0\2\12"+
    "\1\375\30\12\13\0\12\12\1\0\14\12\1\376\16\12"+
    "\13\0\12\12\1\0\10\12\1\377\22\12\13\0\12\12"+
    "\1\0\16\12\1\u0100\14\12\13\0\12\12\1\0\22\12"+
    "\1\u0101\10\12\13\0\12\12\1\0\2\12\1\u0102\7\12"+
    "\1\u0103\20\12\13\0\12\12\1\0\25\12\1\u0104\5\12"+
    "\32\0\1\u0105\60\0\1\u0106\76\0\1\u0107\44\0\1\u0108"+
    "\77\0\1\u0109\51\0\1\u010a\46\0\1\u010b\56\0\1\u010c"+
    "\60\0\1\u010d\101\0\1\u010e\57\0\1\u010f\42\0\1\u0110"+
    "\60\0\1\u0111\76\0\1\u0112\44\0\1\u0113\77\0\1\u0114"+
    "\51\0\1\u0115\46\0\1\u0116\56\0\1\u0117\60\0\1\u0118"+
    "\101\0\1\u0119\57\0\1\u011a\23\0\12\12\1\0\2\12"+
    "\1\u011b\30\12\13\0\12\12\1\0\4\12\1\u011c\26\12"+
    "\13\0\12\12\1\0\1\12\1\u011d\31\12\13\0\12\12"+
    "\1\0\6\12\1\u011e\24\12\13\0\12\12\1\0\22\12"+
    "\1\u011f\10\12\13\0\12\12\1\0\17\12\1\u0120\13\12"+
    "\13\0\12\12\1\0\17\12\1\u0121\2\12\1\u0122\10\12"+
    "\13\0\12\12\1\0\11\12\1\u0123\3\12\1\u0124\15\12"+
    "\13\0\12\12\1\0\6\12\1\u0125\24\12\13\0\12\12"+
    "\1\0\31\12\1\u0126\1\12\13\0\12\12\1\0\17\12"+
    "\1\u0127\13\12\13\0\12\12\1\0\22\12\1\105\10\12"+
    "\13\0\12\12\1\0\14\12\1\u0128\16\12\13\0\12\12"+
    "\1\0\20\12\1\u0129\12\12\13\0\12\12\1\0\14\12"+
    "\1\u012a\16\12\13\0\12\12\1\0\4\12\1\u012b\26\12"+
    "\13\0\12\12\1\0\23\12\1\u012c\7\12\13\0\12\12"+
    "\1\0\14\12\1\u012d\16\12\13\0\12\12\1\0\23\12"+
    "\1\u012e\7\12\13\0\12\12\1\0\15\12\1\u012f\15\12"+
    "\13\0\12\12\1\0\14\12\1\u0130\16\12\13\0\12\12"+
    "\1\0\16\12\1\u0131\14\12\13\0\12\12\1\0\16\12"+
    "\1\u0132\14\12\13\0\12\12\1\0\2\12\1\u0133\30\12"+
    "\13\0\12\12\1\0\2\12\1\u0134\30\12\13\0\12\12"+
    "\1\0\1\12\1\u0135\31\12\13\0\12\12\1\0\14\12"+
    "\1\u0136\16\12\13\0\12\12\1\0\1\12\1\u0137\31\12"+
    "\13\0\12\12\1\0\22\12\1\u0138\10\12\13\0\12\12"+
    "\1\0\6\12\1\u0139\24\12\13\0\12\12\1\0\22\12"+
    "\1\u013a\10\12\13\0\12\12\1\0\6\12\1\u013b\24\12"+
    "\13\0\12\12\1\0\7\12\1\u013c\23\12\13\0\12\12"+
    "\1\0\12\12\1\u013d\20\12\13\0\12\12\1\0\20\12"+
    "\1\u013e\12\12\13\0\12\12\1\0\1\12\1\u013f\31\12"+
    "\13\0\12\12\1\0\17\12\1\u0140\13\12\13\0\12\12"+
    "\1\0\22\12\1\u0141\10\12\13\0\12\12\1\0\17\12"+
    "\1\u0142\13\12\13\0\12\12\1\0\22\12\1\u0143\10\12"+
    "\13\0\12\12\1\0\2\12\1\u0144\30\12\13\0\12\12"+
    "\1\0\12\12\1\u0145\20\12\13\0\1\12\1\u0146\1\u0147"+
    "\1\u0148\1\u0149\1\u014a\1\u014b\1\u014c\1\u014d\1\u014e\1\0"+
    "\33\12\13\0\12\12\1\0\6\12\1\105\24\12\13\0"+
    "\12\12\1\0\22\12\1\u014f\10\12\13\0\12\12\1\0"+
    "\16\12\1\u0150\14\12\13\0\12\12\1\0\2\12\1\u0151"+
    "\30\12\13\0\12\12\1\0\14\12\1\u0152\16\12\13\0"+
    "\12\12\1\0\23\12\1\u0153\7\12\13\0\12\12\1\0"+
    "\22\12\1\u0154\10\12\13\0\12\12\1\0\17\12\1\u0155"+
    "\13\12\13\0\12\12\1\0\3\12\1\u0156\27\12\13\0"+
    "\12\12\1\0\15\12\1\u0157\15\12\37\0\1\u0158\51\0"+
    "\1\u0159\64\0\1\u015a\64\0\1\u015b\54\0\1\u015c\76\0"+
    "\1\u015d\36\0\1\u015e\100\0\1\u015f\60\0\1\u0160\47\0"+
    "\1\u0161\51\0\1\u0162\64\0\1\u0163\64\0\1\u0164\54\0"+
    "\1\u0165\76\0\1\u0166\36\0\1\u0167\100\0\1\u0168\60\0"+
    "\1\u0169\23\0\12\12\1\0\4\12\1\u016a\26\12\13\0"+
    "\12\12\1\0\12\12\1\u016b\20\12\13\0\12\12\1\0"+
    "\22\12\1\u016c\10\12\13\0\12\12\1\0\22\12\1\u016d"+
    "\10\12\13\0\12\12\1\0\2\12\1\u016e\30\12\13\0"+
    "\12\12\1\0\14\12\1\u016f\16\12\13\0\12\12\1\0"+
    "\22\12\1\u0170\10\12\13\0\12\12\1\0\17\12\1\u0171"+
    "\13\12\13\0\12\12\1\0\25\12\1\u0172\5\12\13\0"+
    "\12\12\1\0\12\12\1\u0173\20\12\13\0\12\12\1\0"+
    "\4\12\1\u0174\26\12\13\0\12\12\1\0\1\12\1\u0175"+
    "\31\12\13\0\12\12\1\0\15\12\1\u0176\15\12\13\0"+
    "\12\12\1\0\12\12\1\u0177\20\12\13\0\12\12\1\0"+
    "\2\12\1\u0178\30\12\13\0\12\12\1\0\2\12\1\u0179"+
    "\30\12\13\0\12\12\1\0\2\12\1\u017a\30\12\13\0"+
    "\12\12\1\0\23\12\1\u017b\7\12\13\0\12\12\1\0"+
    "\17\12\1\u017c\13\12\13\0\12\12\1\0\23\12\1\u017d"+
    "\7\12\13\0\12\12\1\0\2\12\1\u017e\30\12\13\0"+
    "\12\12\1\0\12\12\1\u017f\20\12\13\0\12\12\1\0"+
    "\12\12\1\u0180\20\12\13\0\12\12\1\0\4\12\1\u0181"+
    "\26\12\13\0\12\12\1\0\22\12\1\u0182\10\12\13\0"+
    "\12\12\1\0\10\12\1\u0183\22\12\13\0\12\12\1\0"+
    "\6\12\1\u0184\24\12\13\0\12\12\1\0\17\12\1\u0185"+
    "\13\12\13\0\12\12\1\0\12\12\1\u0186\10\12\1\u0187"+
    "\7\12\13\0\12\12\1\0\2\12\1\u0188\30\12\13\0"+
    "\1\12\5\105\4\12\1\0\33\12\13\0\12\12\1\0"+
    "\1\12\1\u0189\31\12\13\0\12\12\1\0\14\12\1\u018a"+
    "\16\12\13\0\12\12\1\0\12\12\1\u018b\20\12\13\0"+
    "\12\12\1\0\14\12\1\u018c\16\12\13\0\12\12\1\0"+
    "\6\12\1\u018d\24\12\13\0\12\12\1\0\15\12\1\u018e"+
    "\15\12\13\0\12\12\1\0\1\12\1\u018f\31\12\13\0"+
    "\12\12\1\0\1\12\1\u0190\31\12\13\0\12\12\1\0"+
    "\1\12\1\u0191\31\12\13\0\12\12\1\0\1\12\1\u0192"+
    "\31\12\13\0\12\12\1\0\22\12\1\u0193\10\12\13\0"+
    "\12\12\1\0\3\12\1\u0194\27\12\13\0\1\u0195\11\12"+
    "\1\0\33\12\13\0\12\12\1\0\2\12\1\u0196\30\12"+
    "\13\0\12\12\1\0\11\12\1\u0197\21\12\13\0\12\12"+
    "\1\0\6\12\1\u0198\24\12\13\0\12\12\1\0\20\12"+
    "\1\u0199\12\12\13\0\12\12\1\0\17\12\1\u019a\13\12"+
    "\13\0\12\12\1\0\30\12\1\u019b\1\u019c\1\u019d\13\0"+
    "\12\12\1\0\12\12\1\u019e\20\12\13\0\12\12\1\0"+
    "\6\12\1\u019f\24\12\30\0\1\u01a0\100\0\1\u01a1\60\0"+
    "\1\u01a2\62\0\1\u01a3\56\0\1\u01a4\44\0\1\u01a5\74\0"+
    "\1\u01a6\60\0\1\u01a7\40\0\1\u01a8\100\0\1\u01a9\60\0"+
    "\1\u01aa\62\0\1\u01ab\56\0\1\u01ac\44\0\1\u01ad\74\0"+
    "\1\u01ae\60\0\1\u01af\23\0\12\12\1\0\2\12\1\u01b0"+
    "\30\12\13\0\12\12\1\0\2\12\1\u01b1\30\12\13\0"+
    "\12\12\1\0\6\12\1\u01b2\24\12\13\0\12\12\1\0"+
    "\1\12\1\u01b3\31\12\13\0\12\12\1\0\22\12\1\u01b4"+
    "\10\12\13\0\12\12\1\0\6\12\1\u01b5\24\12\13\0"+
    "\12\12\1\0\16\12\1\u01b6\14\12\13\0\12\12\1\0"+
    "\14\12\1\u01b7\16\12\13\0\12\12\1\0\5\12\1\u01b8"+
    "\25\12\13\0\12\12\1\0\22\12\1\u01b9\10\12\13\0"+
    "\12\12\1\0\2\12\1\u01ba\30\12\13\0\12\12\1\0"+
    "\24\12\1\u01bb\6\12\13\0\12\12\1\0\12\12\1\u01bc"+
    "\20\12\13\0\12\12\1\0\32\12\1\u01bd\13\0\12\12"+
    "\1\0\15\12\1\u01be\15\12\13\0\12\12\1\0\1\12"+
    "\1\u01bf\31\12\13\0\12\12\1\0\15\12\1\u01c0\15\12"+
    "\13\0\12\12\1\0\25\12\1\u01c1\5\12\13\0\12\12"+
    "\1\0\1\12\1\u01c2\31\12\13\0\12\12\1\0\25\12"+
    "\1\u01c3\5\12\13\0\12\12\1\0\30\12\1\u01c4\2\12"+
    "\13\0\12\12\1\0\24\12\1\u01c5\6\12\13\0\12\12"+
    "\1\0\15\12\1\u01c6\15\12\13\0\12\12\1\0\12\12"+
    "\1\u01c7\20\12\13\0\12\12\1\0\6\12\1\u01c8\24\12"+
    "\13\0\12\12\1\0\23\12\1\u01c9\7\12\13\0\12\12"+
    "\1\0\1\12\1\u01ca\31\12\13\0\12\12\1\0\5\12"+
    "\1\u01cb\25\12\13\0\12\12\1\0\12\12\1\u01cc\20\12"+
    "\13\0\12\12\1\0\22\12\1\u01cd\10\12\13\0\12\12"+
    "\1\0\15\12\1\u01ce\15\12\13\0\12\12\1\0\5\12"+
    "\1\u01cf\17\12\1\u01d0\5\12\13\0\12\12\1\0\4\12"+
    "\1\u01d1\26\12\13\0\12\12\1\0\4\12\1\u01d2\26\12"+
    "\13\0\12\12\1\0\2\12\1\u01d3\30\12\13\0\12\12"+
    "\1\0\15\12\1\u01d4\15\12\13\0\12\12\1\0\4\12"+
    "\1\u01d5\1\12\1\u01d6\24\12\13\0\12\12\1\0\15\12"+
    "\1\u01d7\15\12\13\0\12\12\1\0\22\12\1\u01d8\10\12"+
    "\13\0\12\12\1\0\12\12\1\u01d9\20\12\13\0\12\12"+
    "\1\0\5\12\1\u01da\25\12\13\0\12\12\1\0\17\12"+
    "\1\u01db\13\12\13\0\12\12\1\0\1\12\1\u01dc\31\12"+
    "\13\0\12\12\1\0\2\12\1\u01dd\30\12\13\0\12\12"+
    "\1\0\27\12\1\105\3\12\13\0\12\12\1\0\14\12"+
    "\1\u01de\16\12\13\0\12\12\1\0\1\12\1\u01df\31\12"+
    "\50\0\1\u01e0\25\0\1\u01e1\73\0\1\u01e2\63\0\1\u01e3"+
    "\61\0\1\u01e4\74\0\1\u01e5\25\0\1\u01e6\73\0\1\u01e7"+
    "\63\0\1\u01e8\61\0\1\u01e9\37\0\12\12\1\0\17\12"+
    "\1\u01ea\13\12\13\0\12\12\1\0\22\12\1\u01eb\10\12"+
    "\13\0\12\12\1\0\32\12\1\u01ec\13\0\12\12\1\0"+
    "\2\12\1\u01ed\30\12\13\0\12\12\1\0\1\12\1\u01ee"+
    "\31\12\13\0\12\12\1\0\17\12\1\u01ef\13\12\13\0"+
    "\12\12\1\0\6\12\1\u01f0\24\12\13\0\12\12\1\0"+
    "\2\12\1\u01f1\30\12\13\0\12\12\1\0\17\12\1\u01f2"+
    "\13\12\13\0\12\12\1\0\12\12\1\u01f3\20\12\13\0"+
    "\12\12\1\0\2\12\1\u01f4\30\12\13\0\12\12\1\0"+
    "\2\12\1\u01f5\30\12\13\0\12\12\1\0\6\12\1\u01f6"+
    "\24\12\13\0\12\12\1\0\11\12\1\u01f7\21\12\13\0"+
    "\12\12\1\0\6\12\1\u01f8\24\12\13\0\12\12\1\0"+
    "\22\12\1\u01f9\10\12\13\0\12\12\1\0\15\12\1\u01fa"+
    "\15\12\13\0\12\12\1\0\22\12\1\u01fb\10\12\13\0"+
    "\12\12\1\0\2\12\1\u01fc\30\12\13\0\12\12\1\0"+
    "\12\12\1\u01fd\20\12\13\0\12\12\1\0\2\12\1\u01fe"+
    "\30\12\13\0\12\12\1\0\15\12\1\u01ff\15\12\13\0"+
    "\12\12\1\0\20\12\1\u0200\12\12\13\0\12\12\1\0"+
    "\4\12\1\u0201\26\12\13\0\12\12\1\0\1\12\1\u0202"+
    "\31\12\13\0\12\12\1\0\14\12\1\u0203\16\12\13\0"+
    "\12\12\1\0\1\12\1\u0204\31\12\13\0\12\12\1\0"+
    "\26\12\1\u0205\4\12\13\0\12\12\1\0\17\12\1\u0206"+
    "\13\12\13\0\12\12\1\0\20\12\1\105\12\12\13\0"+
    "\12\12\1\0\2\12\1\u0207\30\12\13\0\12\12\1\0"+
    "\24\12\1\u0208\6\12\13\0\12\12\1\0\30\12\1\u0209"+
    "\2\12\13\0\12\12\1\0\12\12\1\u020a\20\12\13\0"+
    "\12\12\1\0\6\12\1\u020b\24\12\13\0\12\12\1\0"+
    "\23\12\1\u020c\7\12\13\0\12\12\1\0\12\12\1\u020d"+
    "\20\12\13\0\12\12\1\0\2\12\1\u020e\30\12\13\0"+
    "\12\12\1\0\14\12\1\u020f\16\12\13\0\12\12\1\0"+
    "\2\12\1\u0210\30\12\13\0\12\12\1\0\1\12\1\u0211"+
    "\31\12\13\0\12\12\1\0\4\12\1\u0212\26\12\13\0"+
    "\12\12\1\0\22\12\1\u0213\10\12\13\0\12\12\1\0"+
    "\12\12\1\u0214\20\12\13\0\12\12\1\0\2\12\1\u0215"+
    "\1\12\1\u0216\2\12\1\u0217\1\u0218\1\12\1\u0219\2\12"+
    "\1\u021a\10\12\1\u021b\4\12\30\0\1\u021c\66\0\1\u021d"+
    "\52\0\1\u021e\66\0\1\u021f\35\0\12\12\1\0\1\12"+
    "\1\u0220\31\12\13\0\12\12\1\0\1\12\1\u0221\31\12"+
    "\13\0\12\12\1\0\17\12\1\u0222\13\12\13\0\12\12"+
    "\1\0\25\12\1\u0223\5\12\13\0\12\12\1\0\2\12"+
    "\1\u0224\22\12\1\u0225\5\12\13\0\12\12\1\0\1\12"+
    "\1\u0226\31\12\13\0\12\12\1\0\3\12\1\u0227\4\12"+
    "\1\u0228\11\12\1\u0229\10\12\13\0\12\12\1\0\1\12"+
    "\1\u022a\31\12\13\0\12\12\1\0\22\12\1\u022b\10\12"+
    "\13\0\12\12\1\0\1\12\1\u022c\31\12\13\0\12\12"+
    "\1\0\4\12\1\u022d\26\12\13\0\12\12\1\0\16\12"+
    "\1\u022e\14\12\13\0\12\12\1\0\25\12\1\u022f\5\12"+
    "\13\0\12\12\1\0\16\12\1\u0230\14\12\13\0\12\12"+
    "\1\0\2\12\1\u0231\30\12\13\0\12\12\1\0\12\12"+
    "\1\u0232\20\12\13\0\12\12\1\0\2\12\1\u0233\30\12"+
    "\13\0\12\12\1\0\22\12\1\u0234\10\12\13\0\12\12"+
    "\1\0\10\12\1\u0235\22\12\13\0\12\12\1\0\1\12"+
    "\1\u0236\31\12\13\0\12\12\1\0\23\12\1\u0237\7\12"+
    "\13\0\12\12\1\0\2\12\1\u0238\30\12\13\0\12\12"+
    "\1\0\14\12\1\u0239\16\12\13\0\12\12\1\0\24\12"+
    "\1\u023a\6\12\13\0\12\12\1\0\6\12\1\u023b\24\12"+
    "\13\0\12\12\1\0\4\12\1\u023c\23\12\1\u023d\2\12"+
    "\13\0\12\12\1\0\20\12\1\u023e\12\12\13\0\12\12"+
    "\1\0\27\12\1\u023f\3\12\13\0\12\12\1\0\4\12"+
    "\1\u0240\26\12\13\0\12\12\1\0\12\12\1\u0241\20\12"+
    "\13\0\12\12\1\0\22\12\1\u0242\10\12\13\0\12\12"+
    "\1\0\16\12\1\u0243\14\12\13\0\12\12\1\0\4\12"+
    "\1\u0244\26\12\13\0\12\12\1\0\22\12\1\u0245\10\12"+
    "\13\0\12\12\1\0\5\12\1\u0246\25\12\13\0\12\12"+
    "\1\0\12\12\1\u0247\20\12\13\0\12\12\1\0\22\12"+
    "\1\u0248\10\12\13\0\12\12\1\0\15\12\1\u0249\15\12"+
    "\13\0\12\12\1\0\17\12\1\u024a\13\12\13\0\12\12"+
    "\1\0\6\12\1\u024b\24\12\13\0\12\12\1\0\5\12"+
    "\1\u024c\25\12\13\0\12\12\1\0\4\12\1\u024d\7\12"+
    "\1\u024e\16\12\13\0\12\12\1\0\2\12\1\u024f\30\12"+
    "\13\0\12\12\1\0\12\12\1\u0250\20\12\13\0\12\12"+
    "\1\0\6\12\1\u0251\24\12\13\0\12\12\1\0\16\12"+
    "\1\u0252\14\12\13\0\12\12\1\0\6\12\1\u0253\17\12"+
    "\1\u0254\4\12\13\0\12\12\1\0\17\12\1\u0255\13\12"+
    "\30\0\1\u0256\60\0\1\u0257\43\0\12\12\1\0\2\12"+
    "\1\u0258\30\12\13\0\12\12\1\0\20\12\1\u0259\12\12"+
    "\13\0\12\12\1\0\17\12\1\u025a\13\12\13\0\12\12"+
    "\1\0\5\12\1\u025b\25\12\13\0\12\12\1\0\22\12"+
    "\1\u025c\10\12\13\0\12\12\1\0\23\12\1\u025d\7\12"+
    "\13\0\12\12\1\0\15\12\1\u025e\15\12\13\0\12\12"+
    "\1\0\20\12\1\u025f\12\12\13\0\12\12\1\0\2\12"+
    "\1\u0260\30\12\13\0\12\12\1\0\3\12\1\u0261\27\12"+
    "\13\0\12\12\1\0\2\12\1\u0262\30\12\13\0\12\12"+
    "\1\0\24\12\1\u0263\6\12\13\0\12\12\1\0\5\12"+
    "\1\u0264\25\12\13\0\12\12\1\0\24\12\1\u0265\6\12"+
    "\13\0\12\12\1\0\1\12\1\u0266\31\12\13\0\12\12"+
    "\1\0\22\12\1\u0267\10\12\13\0\12\12\1\0\1\12"+
    "\1\u0268\31\12\13\0\12\12\1\0\1\12\1\u0269\31\12"+
    "\13\0\12\12\1\0\17\12\1\u026a\13\12\13\0\12\12"+
    "\1\0\3\12\1\u026b\27\12\13\0\12\12\1\0\1\12"+
    "\1\u026c\31\12\13\0\12\12\1\0\4\12\1\u026d\26\12"+
    "\13\0\12\12\1\0\2\12\1\u026e\30\12\13\0\12\12"+
    "\1\0\12\12\1\u026f\20\12\13\0\12\12\1\0\16\12"+
    "\1\u0270\14\12\13\0\12\12\1\0\17\12\1\u0271\13\12"+
    "\13\0\12\12\1\0\22\12\1\u0272\10\12\13\0\12\12"+
    "\1\0\16\12\1\105\14\12\13\0\12\12\1\0\2\12"+
    "\1\u0273\30\12\13\0\12\12\1\0\26\12\1\u0274\4\12"+
    "\13\0\12\12\1\0\2\12\1\u0275\30\12\13\0\12\12"+
    "\1\0\24\12\1\u0276\6\12\13\0\12\12\1\0\2\12"+
    "\1\u0277\30\12\13\0\12\12\1\0\2\12\1\u0278\30\12"+
    "\13\0\12\12\1\0\2\12\1\u0279\30\12\13\0\12\12"+
    "\1\0\5\12\1\u027a\25\12\13\0\12\12\1\0\1\12"+
    "\1\u027b\31\12\13\0\12\12\1\0\12\12\1\u027c\20\12"+
    "\13\0\12\12\1\0\16\12\1\u027d\14\12\13\0\12\12"+
    "\1\0\16\12\1\u027e\14\12\13\0\12\12\1\0\2\12"+
    "\1\u027f\30\12\13\0\12\12\1\0\2\12\1\u0280\30\12"+
    "\13\0\12\12\1\0\6\12\1\u0281\24\12\13\0\12\12"+
    "\1\0\15\12\1\u0282\15\12\13\0\12\12\1\0\15\12"+
    "\1\u0283\15\12\13\0\12\12\1\0\22\12\1\u0284\10\12"+
    "\13\0\12\12\1\0\12\12\1\u0285\20\12\13\0\12\12"+
    "\1\0\16\12\1\u0286\14\12\13\0\12\12\1\0\20\12"+
    "\1\u0287\12\12\13\0\12\12\1\0\12\12\1\u0288\20\12"+
    "\50\0\1\u0289\60\0\1\u028a\23\0\12\12\1\0\26\12"+
    "\1\u028b\4\12\13\0\12\12\1\0\2\12\1\u028c\30\12"+
    "\13\0\12\12\1\0\15\12\1\u028d\15\12\13\0\12\12"+
    "\1\0\12\12\1\u028e\20\12\13\0\12\12\1\0\15\12"+
    "\1\u028f\15\12\13\0\12\12\1\0\6\12\1\u0290\24\12"+
    "\13\0\12\12\1\0\12\12\1\u0291\20\12\13\0\12\12"+
    "\1\0\6\12\1\u0292\24\12\13\0\12\12\1\0\22\12"+
    "\1\u0293\10\12\13\0\12\12\1\0\2\12\1\u0294\30\12"+
    "\13\0\12\12\1\0\17\12\1\u0295\13\12\13\0\12\12"+
    "\1\0\17\12\1\u0296\13\12\13\0\12\12\1\0\17\12"+
    "\1\u0297\13\12\13\0\12\12\1\0\15\12\1\u0298\15\12"+
    "\13\0\12\12\1\0\2\12\1\u0299\30\12\13\0\12\12"+
    "\1\0\3\12\1\u029a\27\12\13\0\12\12\1\0\15\12"+
    "\1\u029b\15\12\13\0\12\12\1\0\2\12\1\u029c\30\12"+
    "\13\0\12\12\1\0\26\12\1\u029d\4\12\13\0\12\12"+
    "\1\0\2\12\1\u029e\30\12\13\0\12\12\1\0\23\12"+
    "\1\u029f\7\12\13\0\12\12\1\0\15\12\1\u02a0\15\12"+
    "\13\0\12\12\1\0\4\12\1\u02a1\26\12\13\0\12\12"+
    "\1\0\22\12\1\u02a2\10\12\13\0\12\12\1\0\2\12"+
    "\1\u02a3\30\12\13\0\12\12\1\0\17\12\1\u02a4\13\12"+
    "\13\0\12\12\1\0\2\12\1\u02a5\30\12\13\0\12\12"+
    "\1\0\22\12\1\u02a6\10\12\13\0\12\12\1\0\14\12"+
    "\1\u02a7\16\12\13\0\12\12\1\0\22\12\1\u02a8\10\12"+
    "\13\0\12\12\1\0\2\12\1\u02a9\30\12\13\0\12\12"+
    "\1\0\21\12\1\u02aa\11\12\13\0\12\12\1\0\22\12"+
    "\1\u02ab\10\12\13\0\12\12\1\0\23\12\1\u02ac\7\12"+
    "\13\0\12\12\1\0\4\12\1\u02ad\26\12\13\0\12\12"+
    "\1\0\5\12\1\u02ae\25\12\13\0\12\12\1\0\17\12"+
    "\1\u02af\13\12\13\0\12\12\1\0\22\12\1\u02b0\10\12"+
    "\13\0\12\12\1\0\6\12\1\u02b1\24\12\13\0\12\12"+
    "\1\0\1\12\1\u02b2\31\12\13\0\12\12\1\0\2\12"+
    "\1\u02b3\30\12\13\0\12\12\1\0\4\12\1\u02b4\26\12"+
    "\13\0\12\12\1\0\25\12\1\u02b5\5\12\13\0\12\12"+
    "\1\0\20\12\1\u02b6\12\12\13\0\12\12\1\0\2\12"+
    "\1\u02b7\30\12\13\0\12\12\1\0\22\12\1\u02b8\10\12"+
    "\13\0\12\12\1\0\1\12\1\u02b9\31\12\13\0\12\12"+
    "\1\0\17\12\1\u02ba\13\12\13\0\12\12\1\0\2\12"+
    "\1\u02bb\30\12\13\0\12\12\1\0\22\12\1\u02bc\10\12"+
    "\13\0\12\12\1\0\22\12\1\u02bd\10\12\13\0\12\12"+
    "\1\0\1\12\1\u02be\31\12\13\0\12\12\1\0\24\12"+
    "\1\u02bf\6\12\13\0\12\12\1\0\23\12\1\u02c0\7\12"+
    "\13\0\12\12\1\0\1\12\1\u02c1\31\12\13\0\12\12"+
    "\1\0\12\12\1\u02c2\20\12\13\0\12\12\1\0\17\12"+
    "\1\u02c3\13\12\13\0\12\12\1\0\17\12\1\u02c4\13\12"+
    "\13\0\12\12\1\0\12\12\1\u02c5\20\12\13\0\12\12"+
    "\1\0\6\12\1\u02c6\24\12\13\0\12\12\1\0\15\12"+
    "\1\u02c7\15\12\13\0\12\12\1\0\23\12\1\u02c8\7\12"+
    "\13\0\12\12\1\0\6\12\1\u02c9\24\12\13\0\12\12"+
    "\1\0\12\12\1\u02ca\20\12\13\0\12\12\1\0\1\12"+
    "\1\u02cb\31\12\13\0\12\12\1\0\31\12\1\u02cc\1\12"+
    "\13\0\12\12\1\0\1\12\1\u02cd\31\12\13\0\12\12"+
    "\1\0\1\12\1\u02ce\31\12\13\0\12\12\1\0\2\12"+
    "\1\u02cf\30\12\13\0\12\12\1\0\2\12\1\u02d0\30\12"+
    "\13\0\12\12\1\0\5\12\1\u02d1\25\12\13\0\12\12"+
    "\1\0\25\12\1\u02d2\5\12\13\0\12\12\1\0\2\12"+
    "\1\u02d3\30\12\13\0\12\12\1\0\17\12\1\u02d4\13\12"+
    "\13\0\12\12\1\0\12\12\1\u02d5\20\12\13\0\12\12"+
    "\1\0\6\12\1\u02d6\24\12\13\0\12\12\1\0\1\12"+
    "\1\u02d7\31\12\13\0\12\12\1\0\24\12\1\u02d8\6\12"+
    "\13\0\12\12\1\0\22\12\1\u02d9\10\12\13\0\12\12"+
    "\1\0\22\12\1\u02da\10\12\13\0\12\12\1\0\14\12"+
    "\1\u02db\16\12\13\0\12\12\1\0\12\12\1\u02dc\20\12"+
    "\13\0\12\12\1\0\24\12\1\u02dd\6\12\13\0\12\12"+
    "\1\0\24\12\1\u02de\6\12\13\0\12\12\1\0\23\12"+
    "\1\u02df\7\12\13\0\12\12\1\0\1\12\1\u02e0\31\12"+
    "\13\0\12\12\1\0\2\12\1\u02e1\30\12\13\0\12\12"+
    "\1\0\23\12\1\u02e2\7\12\13\0\12\12\1\0\15\12"+
    "\1\u02e3\15\12\13\0\12\12\1\0\6\12\1\u02e4\24\12"+
    "\13\0\12\12\1\0\15\12\1\u02e5\15\12\13\0\12\12"+
    "\1\0\22\12\1\u02e6\10\12\13\0\12\12\1\0\22\12"+
    "\1\u02e7\10\12\13\0\12\12\1\0\25\12\1\u02e8\5\12"+
    "\13\0\12\12\1\0\30\12\1\u02e9\2\12\13\0\12\12"+
    "\1\0\22\12\1\u02ea\10\12\13\0\12\12\1\0\6\12"+
    "\1\u02eb\24\12\13\0\12\12\1\0\12\12\1\u02ec\20\12"+
    "\13\0\12\12\1\0\2\12\1\u02ed\30\12\13\0\12\12"+
    "\1\0\12\12\1\u02ee\11\12\1\u02ef\6\12\13\0\12\12"+
    "\1\0\23\12\1\u02f0\7\12\13\0\12\12\1\0\2\12"+
    "\1\u02f1\30\12\13\0\12\12\1\0\14\12\1\u02f2\16\12"+
    "\13\0\12\12\1\0\1\12\1\u02f3\31\12\13\0\12\12"+
    "\1\0\6\12\1\u02f4\24\12\13\0\12\12\1\0\2\12"+
    "\1\u02f5\30\12\13\0\12\12\1\0\1\12\1\u02f6\31\12"+
    "\13\0\12\12\1\0\14\12\1\u02f7\16\12\13\0\12\12"+
    "\1\0\2\12\1\u02f8\30\12\13\0\12\12\1\0\1\12"+
    "\1\u02f9\31\12\13\0\12\12\1\0\22\12\1\u02fa\10\12"+
    "\13\0\12\12\1\0\2\12\1\u02fb\30\12\13\0\12\12"+
    "\1\0\2\12\1\u02fc\30\12\13\0\12\12\1\0\17\12"+
    "\1\u02fd\13\12\13\0\12\12\1\0\17\12\1\u02fe\13\12"+
    "\13\0\12\12\1\0\2\12\1\u02ff\30\12\13\0\12\12"+
    "\1\0\12\12\1\u0300\20\12\13\0\12\12\1\0\16\12"+
    "\1\u0301\14\12\13\0\12\12\1\0\2\12\1\u0302\30\12"+
    "\13\0\12\12\1\0\20\12\1\u0303\12\12\13\0\12\12"+
    "\1\0\12\12\1\u0304\20\12\13\0\12\12\1\0\22\12"+
    "\1\u0305\10\12\13\0\12\12\1\0\12\12\1\u0306\20\12"+
    "\13\0\12\12\1\0\2\12\1\u0307\30\12\13\0\12\12"+
    "\1\0\5\12\1\u0308\25\12\13\0\12\12\1\0\23\12"+
    "\1\u0309\7\12\13\0\12\12\1\0\2\12\1\u030a\30\12"+
    "\13\0\12\12\1\0\23\12\1\u030b\7\12\13\0\12\12"+
    "\1\0\16\12\1\u030c\14\12\13\0\12\12\1\0\4\12"+
    "\1\u030d\26\12\13\0\12\12\1\0\5\12\1\u030e\25\12"+
    "\13\0\12\12\1\0\5\12\1\u030f\25\12\13\0\12\12"+
    "\1\0\12\12\1\u0310\20\12\13\0\12\12\1\0\24\12"+
    "\1\u0311\6\12\13\0\12\12\1\0\25\12\1\u0312\5\12"+
    "\13\0\12\12\1\0\12\12\1\u0313\20\12\13\0\12\12"+
    "\1\0\12\12\1\u0314\20\12\13\0\12\12\1\0\1\12"+
    "\1\u0315\31\12\13\0\12\12\1\0\5\12\1\u0316\25\12"+
    "\13\0\12\12\1\0\23\12\1\u0317\7\12\13\0\12\12"+
    "\1\0\6\12\1\u0318\24\12\13\0\12\12\1\0\1\12"+
    "\1\u0319\31\12\13\0\12\12\1\0\13\12\1\u031a\17\12"+
    "\13\0\12\12\1\0\17\12\1\u031b\13\12\13\0\12\12"+
    "\1\0\1\12\1\u031c\31\12\13\0\12\12\1\0\1\12"+
    "\1\u031d\31\12\13\0\12\12\1\0\5\12\1\u031e\25\12"+
    "\13\0\12\12\1\0\1\12\1\u031f\31\12\13\0\12\12"+
    "\1\0\22\12\1\u0320\10\12\13\0\12\12\1\0\5\12"+
    "\1\u0321\25\12\13\0\12\12\1\0\12\12\1\u0322\20\12"+
    "\13\0\12\12\1\0\14\12\1\u0323\16\12\13\0\12\12"+
    "\1\0\6\12\1\u0324\24\12\13\0\12\12\1\0\22\12"+
    "\1\u0325\10\12\13\0\12\12\1\0\12\12\1\u0326\20\12"+
    "\13\0\12\12\1\0\22\12\1\u0327\10\12\13\0\12\12"+
    "\1\0\2\12\1\u0328\30\12\13\0\12\12\1\0\6\12"+
    "\1\u0329\24\12\13\0\12\12\1\0\2\12\1\u032a\30\12"+
    "\13\0\12\12\1\0\24\12\1\u032b\6\12\13\0\12\12"+
    "\1\0\17\12\1\u032c\13\12\13\0\12\12\1\0\17\12"+
    "\1\u032d\13\12\13\0\12\12\1\0\1\12\1\u032e\31\12"+
    "\13\0\12\12\1\0\15\12\1\u032f\15\12\13\0\12\12"+
    "\1\0\6\12\1\u0330\24\12\13\0\12\12\1\0\5\12"+
    "\1\u0331\25\12\13\0\12\12\1\0\32\12\1\u0332\13\0"+
    "\12\12\1\0\16\12\1\u0333\14\12\13\0\12\12\1\0"+
    "\32\12\1\u0334\13\0\12\12\1\0\22\12\1\u0335\10\12"+
    "\13\0\12\12\1\0\16\12\1\u0336\14\12\13\0\12\12"+
    "\1\0\15\12\1\u0337\15\12\13\0\12\12\1\0\17\12"+
    "\1\u0338\13\12\13\0\12\12\1\0\5\12\1\u0339\25\12"+
    "\13\0\1\12\1\u033a\10\12\1\0\33\12\13\0\12\12"+
    "\1\0\15\12\1\u033b\15\12\13\0\12\12\1\0\2\12"+
    "\1\u033c\30\12\13\0\12\12\1\0\22\12\1\u033d\10\12"+
    "\13\0\12\12\1\0\2\12\1\u033e\30\12\13\0\12\12"+
    "\1\0\20\12\1\u033f\12\12\13\0\12\12\1\0\6\12"+
    "\1\u0340\24\12\13\0\12\12\1\0\4\12\1\u0341\26\12"+
    "\13\0\12\12\1\0\2\12\1\u0342\30\12\13\0\12\12"+
    "\1\0\2\12\1\u0343\30\12\13\0\12\12\1\0\2\12"+
    "\1\u0344\30\12\13\0\12\12\1\0\1\12\1\u0345\31\12"+
    "\13\0\12\12\1\0\1\12\1\u0346\31\12\13\0\12\12"+
    "\1\0\17\12\1\u0347\13\12\13\0\12\12\1\0\17\12"+
    "\1\u0348\13\12\13\0\12\12\1\0\22\12\1\u0349\10\12"+
    "\13\0\12\12\1\0\24\12\1\u034a\6\12\13\0\12\12"+
    "\1\0\6\12\1\u034b\24\12\13\0\12\12\1\0\2\12"+
    "\1\u034c\30\12\13\0\12\12\1\0\12\12\1\u034d\20\12"+
    "\13\0\12\12\1\0\2\12\1\u034e\30\12\13\0\12\12"+
    "\1\0\24\12\1\u034f\6\12\13\0\12\12\1\0\17\12"+
    "\1\u0350\13\12\13\0\12\12\1\0\2\12\1\u0351\30\12"+
    "\13\0\12\12\1\0\12\12\1\u0352\20\12\13\0\12\12"+
    "\1\0\12\12\1\u0353\20\12\13\0\12\12\1\0\10\12"+
    "\1\u0354\22\12\13\0\12\12\1\0\2\12\1\u0355\30\12"+
    "\13\0\1\u0356\11\12\1\0\33\12\13\0\12\12\1\0"+
    "\17\12\1\u0357\13\12\13\0\12\12\1\0\5\12\1\u0358"+
    "\25\12\13\0\12\12\1\0\17\12\1\u0359\13\12\13\0"+
    "\12\12\1\0\6\12\1\u035a\24\12\13\0\12\12\1\0"+
    "\2\12\1\u035b\30\12\13\0\12\12\1\0\24\12\1\u035c"+
    "\6\12\13\0\12\12\1\0\1\12\1\u035d\31\12\13\0"+
    "\12\12\1\0\15\12\1\u035e\15\12\13\0\12\12\1\0"+
    "\24\12\1\u035f\6\12\13\0\12\12\1\0\1\12\1\u0360"+
    "\31\12\13\0\12\12\1\0\12\12\1\u0361\20\12\13\0"+
    "\12\12\1\0\15\12\1\u0362\15\12\13\0\12\12\1\0"+
    "\17\12\1\u0363\13\12\13\0\12\12\1\0\5\12\1\u0364"+
    "\25\12\13\0\12\12\1\0\6\12\1\u0365\24\12\13\0"+
    "\12\12\1\0\17\12\1\u0366\13\12\13\0\12\12\1\0"+
    "\5\12\1\u0367\25\12\13\0\12\12\1\0\20\12\1\u0368"+
    "\12\12\13\0\12\12\1\0\22\12\1\u0369\10\12\13\0"+
    "\12\12\1\0\2\12\1\u036a\30\12\13\0\12\12\1\0"+
    "\5\12\1\u036b\25\12\13\0\12\12\1\0\23\12\1\u036c"+
    "\7\12\13\0\12\12\1\0\22\12\1\u036d\10\12\13\0"+
    "\12\12\1\0\2\12\1\u036e\30\12\13\0\12\12\1\0"+
    "\5\12\1\u036f\25\12\13\0\12\12\1\0\22\12\1\u0370"+
    "\10\12\13\0\12\12\1\0\24\12\1\u0371\6\12\13\0"+
    "\12\12\1\0\12\12\1\u0372\20\12\13\0\12\12\1\0"+
    "\23\12\1\u0373\7\12\13\0\12\12\1\0\12\12\1\u0374"+
    "\20\12\13\0\12\12\1\0\2\12\1\u0375\30\12\13\0"+
    "\12\12\1\0\2\12\1\u0376\30\12\13\0\12\12\1\0"+
    "\15\12\1\u0377\15\12\13\0\12\12\1\0\17\12\1\u0378"+
    "\13\12\13\0\12\12\1\0\22\12\1\u0379\10\12\13\0"+
    "\12\12\1\0\15\12\1\u037a\15\12\13\0\12\12\1\0"+
    "\17\12\1\u037b\13\12\13\0\12\12\1\0\6\12\1\u037c"+
    "\24\12\13\0\12\12\1\0\2\12\1\u037d\30\12\13\0"+
    "\12\12\1\0\5\12\1\u037e\25\12\13\0\12\12\1\0"+
    "\2\12\1\u037f\30\12\13\0\12\12\1\0\24\12\1\u0380"+
    "\6\12\13\0\12\12\1\0\2\12\1\u0381\30\12\13\0"+
    "\12\12\1\0\17\12\1\u0382\13\12\13\0\12\12\1\0"+
    "\26\12\1\u0383\4\12\13\0\12\12\1\0\16\12\1\u0384"+
    "\14\12\13\0\12\12\1\0\22\12\1\u0385\10\12\13\0"+
    "\12\12\1\0\3\12\1\u0386\27\12\13\0\12\12\1\0"+
    "\22\12\1\u0387\10\12\13\0\12\12\1\0\6\12\1\u0388"+
    "\24\12\13\0\12\12\1\0\16\12\1\u0389\14\12\13\0"+
    "\12\12\1\0\22\12\1\u038a\10\12\13\0\12\12\1\0"+
    "\17\12\1\u038b\13\12\13\0\12\12\1\0\6\12\1\u038c"+
    "\24\12\13\0\12\12\1\0\5\12\1\u038d\25\12\13\0"+
    "\12\12\1\0\22\12\1\u038e\10\12\13\0\12\12\1\0"+
    "\2\12\1\u038f\30\12\13\0\12\12\1\0\12\12\1\u0390"+
    "\20\12\13\0\12\12\1\0\2\12\1\u0391\30\12\13\0"+
    "\12\12\1\0\15\12\1\u0392\15\12\13\0\12\12\1\0"+
    "\17\12\1\u0393\13\12\13\0\12\12\1\0\22\12\1\u0394"+
    "\10\12\13\0\12\12\1\0\2\12\1\u0395\30\12\13\0"+
    "\12\12\1\0\12\12\1\u0396\20\12\13\0\12\12\1\0"+
    "\1\12\1\u0397\31\12\13\0\12\12\1\0\20\12\1\u0398"+
    "\12\12\13\0\12\12\1\0\2\12\1\u0399\30\12\13\0"+
    "\12\12\1\0\2\12\1\u039a\30\12\13\0\12\12\1\0"+
    "\2\12\1\u039b\30\12\13\0\12\12\1\0\6\12\1\u039c"+
    "\24\12\13\0\12\12\1\0\1\12\1\u039d\31\12\13\0"+
    "\12\12\1\0\25\12\1\u039e\5\12\13\0\12\12\1\0"+
    "\22\12\1\u039f\10\12\13\0\12\12\1\0\5\12\1\u03a0"+
    "\25\12\13\0\12\12\1\0\5\12\1\u03a1\25\12\13\0"+
    "\12\12\1\0\15\12\1\u03a2\15\12\13\0\12\12\1\0"+
    "\12\12\1\u03a3\20\12\13\0\12\12\1\0\17\12\1\u03a4"+
    "\13\12\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[40327];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\23\1\2\11\1\0\1\11"+
    "\24\0\1\1\1\0\61\1\30\0\67\1\6\0\1\11"+
    "\13\0\1\11\5\0\66\1\11\0\2\11\11\0\2\11"+
    "\75\1\7\0\1\11\10\0\1\11\1\0\66\1\1\0"+
    "\1\1\1\11\2\0\2\11\2\0\1\1\1\11\2\0"+
    "\2\11\1\0\60\1\3\11\2\0\3\11\2\0\62\1"+
    "\1\11\1\0\1\11\1\0\66\1\2\0\61\1\2\11"+
    "\u011a\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[932];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    // Código Java adicional se necessário


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Caractere inválido: " + yytext()); return new Symbol(sym.ERROR, yyline, yycolumn, yytext());
            }
          // fall through
          case 123: break;
          case 2:
            { /* ignora espaços */
            }
          // fall through
          case 124: break;
          case 3:
            { return new Symbol(sym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 125: break;
          case 4:
            { return new Symbol(sym.SEMICOLON, yyline, yycolumn, yytext());
            }
          // fall through
          case 126: break;
          case 5:
            { return new Symbol(sym.ID, yyline, yycolumn, yytext());
            }
          // fall through
          case 127: break;
          case 6:
            { return new Symbol(sym.LBRACE, yyline, yycolumn, yytext());
            }
          // fall through
          case 128: break;
          case 7:
            { return new Symbol(sym.RBRACE, yyline, yycolumn, yytext());
            }
          // fall through
          case 129: break;
          case 8:
            { return new Symbol(sym.STRING, yyline, yycolumn, yytext());
            }
          // fall through
          case 130: break;
          case 9:
            { /* ignora comentários */
            }
          // fall through
          case 131: break;
          case 10:
            { return new Symbol(sym.SKEY, yyline, yycolumn, yytext());
            }
          // fall through
          case 132: break;
          case 11:
            { return new Symbol(sym.CL_COLOR, yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 12:
            { return new Symbol(sym.ECHO, yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 13:
            { return new Symbol(sym.ALIAS, yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 14:
            { return new Symbol(sym.PLUS_VOICERECORD, yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 15:
            { return new Symbol(sym.MINUS_VOICERECORD, yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 16:
            { return new Symbol(sym.R_FULLSCREEN_GAMMA, yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 17:
            { return new Symbol(sym.PLUS_BACK, yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 18:
            { return new Symbol(sym.PLUS_USE, yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 19:
            { return new Symbol(sym.MINUS_BACK, yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 20:
            { return new Symbol(sym.MINUS_USE, yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 21:
            { return new Symbol(sym.SLOT1, yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 22:
            { return new Symbol(sym.SLOT2, yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 23:
            { return new Symbol(sym.SLOT3, yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 24:
            { return new Symbol(sym.SLOT4, yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 25:
            { return new Symbol(sym.SLOT5, yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 26:
            { return new Symbol(sym.SLOT6, yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 27:
            { return new Symbol(sym.SLOT7, yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 28:
            { return new Symbol(sym.SLOT8, yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 29:
            { return new Symbol(sym.SLOT9, yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 30:
            { return new Symbol(sym.BIND, yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 31:
            { return new Symbol(sym.VIEWMODEL_FOV, yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 32:
            { return new Symbol(sym.PLUS_JUMP, yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 33:
            { return new Symbol(sym.MINUS_JUMP, yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 34:
            { return new Symbol(sym.CLEAR, yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 35:
            { return new Symbol(sym.PROFILE, yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 36:
            { return new Symbol(sym.HOST_WRITECONFIG, yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 37:
            { return new Symbol(sym.SLOT10, yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 38:
            { return new Symbol(sym.TOGGLE, yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 39:
            { return new Symbol(sym.VIEWMODEL_OFFSET_X, yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 40:
            { return new Symbol(sym.VIEWMODEL_OFFSET_Y, yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 41:
            { return new Symbol(sym.VIEWMODEL_OFFSET_Z, yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 42:
            { return new Symbol(sym.PLUS_ATTACK, yyline, yycolumn);
            }
          // fall through
          case 164: break;
          case 43:
            { return new Symbol(sym.PLUS_SPEED, yyline, yycolumn);
            }
          // fall through
          case 165: break;
          case 44:
            { return new Symbol(sym.PLUS_FORWARD, yyline, yycolumn);
            }
          // fall through
          case 166: break;
          case 45:
            { return new Symbol(sym.PLUS_SCORE, yyline, yycolumn);
            }
          // fall through
          case 167: break;
          case 46:
            { return new Symbol(sym.MINUS_ATTACK, yyline, yycolumn);
            }
          // fall through
          case 168: break;
          case 47:
            { return new Symbol(sym.MINUS_SPEED, yyline, yycolumn);
            }
          // fall through
          case 169: break;
          case 48:
            { return new Symbol(sym.MINUS_FORWARD, yyline, yycolumn);
            }
          // fall through
          case 170: break;
          case 49:
            { return new Symbol(sym.MINUS_SCORE, yyline, yycolumn);
            }
          // fall through
          case 171: break;
          case 50:
            { return new Symbol(sym.CON_ENABLE, yyline, yycolumn);
            }
          // fall through
          case 172: break;
          case 51:
            { return new Symbol(sym.CL_HUD_COLOR, yyline, yycolumn);
            }
          // fall through
          case 173: break;
          case 52:
            { return new Symbol(sym.FPS_MAX, yyline, yycolumn);
            }
          // fall through
          case 174: break;
          case 53:
            { return new Symbol(sym.PLUS_DUCK, yyline, yycolumn);
            }
          // fall through
          case 175: break;
          case 54:
            { return new Symbol(sym.PLUS_ATTACK2, yyline, yycolumn);
            }
          // fall through
          case 176: break;
          case 55:
            { return new Symbol(sym.PLUS_RIGHT, yyline, yycolumn);
            }
          // fall through
          case 177: break;
          case 56:
            { return new Symbol(sym.MINUS_DUCK, yyline, yycolumn);
            }
          // fall through
          case 178: break;
          case 57:
            { return new Symbol(sym.MINUS_ATTACK2, yyline, yycolumn);
            }
          // fall through
          case 179: break;
          case 58:
            { return new Symbol(sym.MINUS_RIGHT, yyline, yycolumn);
            }
          // fall through
          case 180: break;
          case 59:
            { return new Symbol(sym.JOYSTICK, yyline, yycolumn);
            }
          // fall through
          case 181: break;
          case 60:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR, yyline, yycolumn);
            }
          // fall through
          case 182: break;
          case 61:
            { return new Symbol(sym.MM_DEDICATED_SEARCH_MAXPING, yyline, yycolumn);
            }
          // fall through
          case 183: break;
          case 62:
            { return new Symbol(sym.PLUS_LEFT, yyline, yycolumn);
            }
          // fall through
          case 184: break;
          case 63:
            { return new Symbol(sym.MINUS_LEFT, yyline, yycolumn);
            }
          // fall through
          case 185: break;
          case 64:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR_B, yyline, yycolumn);
            }
          // fall through
          case 186: break;
          case 65:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR_G, yyline, yycolumn);
            }
          // fall through
          case 187: break;
          case 66:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR_R, yyline, yycolumn);
            }
          // fall through
          case 188: break;
          case 67:
            { return new Symbol(sym.SND_MUTE_MVP_MUSIC_LIVE_PLAYERS, yyline, yycolumn);
            }
          // fall through
          case 189: break;
          case 68:
            { return new Symbol(sym.HUD_SCALING, yyline, yycolumn);
            }
          // fall through
          case 190: break;
          case 69:
            { return new Symbol(sym.HUD_SHOWTARGETID, yyline, yycolumn);
            }
          // fall through
          case 191: break;
          case 70:
            { return new Symbol(sym.CL_CROSSHAIRDOT, yyline, yycolumn);
            }
          // fall through
          case 192: break;
          case 71:
            { return new Symbol(sym.CL_CROSSHAIR_RECOIL, yyline, yycolumn);
            }
          // fall through
          case 193: break;
          case 72:
            { return new Symbol(sym.SND_MVP_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 194: break;
          case 73:
            { return new Symbol(sym.PLUS_RELOAD, yyline, yycolumn);
            }
          // fall through
          case 195: break;
          case 74:
            { return new Symbol(sym.MINUS_RELOAD, yyline, yycolumn);
            }
          // fall through
          case 196: break;
          case 75:
            { return new Symbol(sym.CL_USE_OPENS_BUY_MENU, yyline, yycolumn);
            }
          // fall through
          case 197: break;
          case 76:
            { return new Symbol(sym.SND_HEADPHONE_EQ, yyline, yycolumn);
            }
          // fall through
          case 198: break;
          case 77:
            { return new Symbol(sym.CL_CROSSHAIRSTYLE, yyline, yycolumn);
            }
          // fall through
          case 199: break;
          case 78:
            { return new Symbol(sym.CL_RADAR_ROTATE, yyline, yycolumn);
            }
          // fall through
          case 200: break;
          case 79:
            { return new Symbol(sym.SND_MENUMUSIC_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 201: break;
          case 80:
            { return new Symbol(sym.SND_VOIPVOLUME, yyline, yycolumn);
            }
          // fall through
          case 202: break;
          case 81:
            { return new Symbol(sym.SND_MIXAHEAD, yyline, yycolumn);
            }
          // fall through
          case 203: break;
          case 82:
            { return new Symbol(sym.CL_SHOWLOADOUT, yyline, yycolumn);
            }
          // fall through
          case 204: break;
          case 83:
            { return new Symbol(sym.CL_TEAMID_OVERHEAD_MODE, yyline, yycolumn);
            }
          // fall through
          case 205: break;
          case 84:
            { return new Symbol(sym.SPEC_SHOW_XRAY, yyline, yycolumn);
            }
          // fall through
          case 206: break;
          case 85:
            { return new Symbol(sym.CL_HUD_RADAR_SCALE, yyline, yycolumn);
            }
          // fall through
          case 207: break;
          case 86:
            { return new Symbol(sym.CL_CROSSHAIRSIZE, yyline, yycolumn);
            }
          // fall through
          case 208: break;
          case 87:
            { return new Symbol(sym.VOLUME, yyline, yycolumn);
            }
          // fall through
          case 209: break;
          case 88:
            { return new Symbol(sym.CL_CROSSHAIR_DRAWOUTLINE, yyline, yycolumn);
            }
          // fall through
          case 210: break;
          case 89:
            { return new Symbol(sym.SENSITIVITY, yyline, yycolumn);
            }
          // fall through
          case 211: break;
          case 90:
            { return new Symbol(sym.CL_CROSSHAIRTHICKNESS, yyline, yycolumn);
            }
          // fall through
          case 212: break;
          case 91:
            { return new Symbol(sym.ENGINE_LOW_LATENCY_SLEEP_AFTER_CLIENT_TICK, yyline, yycolumn);
            }
          // fall through
          case 213: break;
          case 92:
            { return new Symbol(sym.TOGGLECONSOLE, yyline, yycolumn);
            }
          // fall through
          case 214: break;
          case 93:
            { return new Symbol(sym.CL_ALLOW_ANIMATED_AVATARS, yyline, yycolumn);
            }
          // fall through
          case 215: break;
          case 94:
            { return new Symbol(sym.VIEWMODEL_PRESETPOS, yyline, yycolumn);
            }
          // fall through
          case 216: break;
          case 95:
            { return new Symbol(sym.CL_JOIN_ADVERTISE, yyline, yycolumn);
            }
          // fall through
          case 217: break;
          case 96:
            { return new Symbol(sym.BATTERY_SAVER, yyline, yycolumn);
            }
          // fall through
          case 218: break;
          case 97:
            { return new Symbol(sym.CL_CROSSHAIRGAP, yyline, yycolumn);
            }
          // fall through
          case 219: break;
          case 98:
            { return new Symbol(sym.R_SHOW_BUILD_INFO, yyline, yycolumn);
            }
          // fall through
          case 220: break;
          case 99:
            { return new Symbol(sym.CL_SILENCER_MODE, yyline, yycolumn);
            }
          // fall through
          case 221: break;
          case 100:
            { return new Symbol(sym.CL_TEAMMATE_COLORS_SHOW, yyline, yycolumn);
            }
          // fall through
          case 222: break;
          case 101:
            { return new Symbol(sym.UI_STEAM_OVERLAY_NOTIFICATION_POSITION, yyline, yycolumn);
            }
          // fall through
          case 223: break;
          case 102:
            { return new Symbol(sym.SND_SPATIALIZE_LERP, yyline, yycolumn);
            }
          // fall through
          case 224: break;
          case 103:
            { return new Symbol(sym.SND_TENSECONDWARNING_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 225: break;
          case 104:
            { return new Symbol(sym.SND_ROUNDEND_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 226: break;
          case 105:
            { return new Symbol(sym.CL_SNIPER_AUTO_REZOOM, yyline, yycolumn);
            }
          // fall through
          case 227: break;
          case 106:
            { return new Symbol(sym.CL_RADAR_ALWAYS_CENTERED, yyline, yycolumn);
            }
          // fall through
          case 228: break;
          case 107:
            { return new Symbol(sym.ZOOM_SENSITIVITY_RATIO, yyline, yycolumn);
            }
          // fall through
          case 229: break;
          case 108:
            { return new Symbol(sym.CL_RADAR_SQUARE_WITH_SCOREBOARD, yyline, yycolumn);
            }
          // fall through
          case 230: break;
          case 109:
            { return new Symbol(sym.CL_CROSSHAIRALPHA, yyline, yycolumn);
            }
          // fall through
          case 231: break;
          case 110:
            { return new Symbol(sym.SND_ROUNDACTION_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 232: break;
          case 111:
            { return new Symbol(sym.CL_SCOREBOARD_MOUSE_ENABLE_BINDING, yyline, yycolumn);
            }
          // fall through
          case 233: break;
          case 112:
            { return new Symbol(sym.CL_TEAMID_OVERHEAD_COLORS_SHOW, yyline, yycolumn);
            }
          // fall through
          case 234: break;
          case 113:
            { return new Symbol(sym.CL_CROSSHAIR_SNIPER_WIDTH, yyline, yycolumn);
            }
          // fall through
          case 235: break;
          case 114:
            { return new Symbol(sym.SND_DEATHCAMERA_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 236: break;
          case 115:
            { return new Symbol(sym.CL_CROSSHAIR_OUTLINETHICKNESS, yyline, yycolumn);
            }
          // fall through
          case 237: break;
          case 116:
            { return new Symbol(sym.CL_RADAR_SCALE, yyline, yycolumn);
            }
          // fall through
          case 238: break;
          case 117:
            { return new Symbol(sym.R_PLAYER_VISIBILITY_MODE, yyline, yycolumn);
            }
          // fall through
          case 239: break;
          case 118:
            { return new Symbol(sym.SND_ROUNDSTART_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 240: break;
          case 119:
            { return new Symbol(sym.CL_CROSSHAIRGAP_USEWEAPONVALUE, yyline, yycolumn);
            }
          // fall through
          case 241: break;
          case 120:
            { return new Symbol(sym.CL_SNIPER_DELAY_UNSCOPE, yyline, yycolumn);
            }
          // fall through
          case 242: break;
          case 121:
            { return new Symbol(sym.CL_DM_BUYRANDOMWEAPONS, yyline, yycolumn);
            }
          // fall through
          case 243: break;
          case 122:
            { return new Symbol(sym.SND_STEAMAUDIO_ENABLE_PERSPECTIVE_CORRECTION, yyline, yycolumn);
            }
          // fall through
          case 244: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
