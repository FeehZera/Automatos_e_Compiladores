
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\020" +
    "\004\000\002\020\003\000\002\021\002\000\002\003\010" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\006\006\000\002" +
    "\022\002\000\002\007\010\000\002\010\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\016\004\000\002\016\002\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\167\005\001\002\000\004\002\233\001" +
    "\002\000\004\163\011\001\002\000\006\002\ufffe\167\ufffe" +
    "\001\002\000\006\002\000\167\005\001\002\000\006\002" +
    "\uffff\167\uffff\001\002\000\004\171\012\001\002\000\074" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\036\ufffd\037\ufffd\053\ufffd\057\ufffd\061\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\070\ufffd\110\ufffd\111\ufffd\112\ufffd" +
    "\113\ufffd\114\ufffd\172\ufffd\001\002\000\074\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\036" +
    "\ufffa\037\ufffa\053\ufffa\057\ufffa\061\ufffa\063\ufffa\064\ufffa" +
    "\065\ufffa\070\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\114" +
    "\ufffa\172\ufffa\001\002\000\074\004\056\005\046\006\017" +
    "\007\040\010\052\011\015\016\032\017\016\020\023\021" +
    "\042\031\044\032\051\033\055\034\047\036\026\037\041" +
    "\053\037\057\022\061\034\063\031\064\045\065\043\070" +
    "\030\110\033\111\024\112\054\113\027\114\025\172\021" +
    "\001\002\000\010\163\057\165\061\166\060\001\002\000" +
    "\010\163\057\165\061\166\060\001\002\000\010\163\057" +
    "\165\061\166\060\001\002\000\074\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\036\ufffb\037" +
    "\ufffb\053\ufffb\057\ufffb\061\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\070\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\114\ufffb\172" +
    "\ufffb\001\002\000\006\002\ufffc\167\ufffc\001\002\000\010" +
    "\163\057\165\061\166\060\001\002\000\010\163\057\165" +
    "\061\166\060\001\002\000\004\163\205\001\002\000\010" +
    "\163\057\165\061\166\060\001\002\000\010\163\057\165" +
    "\061\166\060\001\002\000\004\170\200\001\002\000\010" +
    "\163\057\165\061\166\060\001\002\000\010\163\057\165" +
    "\061\166\060\001\002\000\010\163\057\165\061\166\060" +
    "\001\002\000\010\163\117\164\122\166\120\001\002\000" +
    "\010\163\057\165\061\166\060\001\002\000\074\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\036\ufff8\037\ufff8\053\ufff8\057\ufff8\061\ufff8\063\ufff8\064" +
    "\ufff8\065\ufff8\070\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8" +
    "\114\ufff8\172\ufff8\001\002\000\074\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037" +
    "\ufff7\053\ufff7\057\ufff7\061\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\070\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7\114\ufff7\172" +
    "\ufff7\001\002\000\010\163\057\165\061\166\060\001\002" +
    "\000\010\163\057\165\061\166\060\001\002\000\010\163" +
    "\057\165\061\166\060\001\002\000\010\163\057\165\061" +
    "\166\060\001\002\000\010\163\057\165\061\166\060\001" +
    "\002\000\010\163\057\165\061\166\060\001\002\000\010" +
    "\163\057\165\061\166\060\001\002\000\010\163\057\165" +
    "\061\166\060\001\002\000\010\163\057\165\061\166\060" +
    "\001\002\000\074\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9\053\ufff9\057" +
    "\ufff9\061\ufff9\063\ufff9\064\ufff9\065\ufff9\070\ufff9\110\ufff9" +
    "\111\ufff9\112\ufff9\113\ufff9\114\ufff9\172\ufff9\001\002\000" +
    "\010\163\057\165\061\166\060\001\002\000\010\163\057" +
    "\165\061\166\060\001\002\000\074\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037" +
    "\ufff6\053\ufff6\057\ufff6\061\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\070\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\114\ufff6\172" +
    "\ufff6\001\002\000\004\170\066\001\002\000\010\163\057" +
    "\165\061\166\060\001\002\000\010\163\057\165\061\166" +
    "\060\001\002\000\004\170\uffae\001\002\000\004\170\uffaf" +
    "\001\002\000\004\170\uffb0\001\002\000\004\170\063\001" +
    "\002\000\074\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\036\ufff3\037\ufff3\053\ufff3\057\ufff3" +
    "\061\ufff3\063\ufff3\064\ufff3\065\ufff3\070\ufff3\110\ufff3\111" +
    "\ufff3\112\ufff3\113\ufff3\114\ufff3\172\ufff3\001\002\000\004" +
    "\170\065\001\002\000\074\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7\037\uffe7\053" +
    "\uffe7\057\uffe7\061\uffe7\063\uffe7\064\uffe7\065\uffe7\070\uffe7" +
    "\110\uffe7\111\uffe7\112\uffe7\113\uffe7\114\uffe7\172\uffe7\001" +
    "\002\000\074\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\036\ufff4\037\ufff4\053\ufff4\057\ufff4" +
    "\061\ufff4\063\ufff4\064\ufff4\065\ufff4\070\ufff4\110\ufff4\111" +
    "\ufff4\112\ufff4\113\ufff4\114\ufff4\172\ufff4\001\002\000\004" +
    "\170\070\001\002\000\074\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\036\uffef\037\uffef\053" +
    "\uffef\057\uffef\061\uffef\063\uffef\064\uffef\065\uffef\070\uffef" +
    "\110\uffef\111\uffef\112\uffef\113\uffef\114\uffef\172\uffef\001" +
    "\002\000\004\170\072\001\002\000\074\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8" +
    "\037\uffe8\053\uffe8\057\uffe8\061\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\070\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8" +
    "\172\uffe8\001\002\000\004\170\074\001\002\000\074\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\036\uffe6\037\uffe6\053\uffe6\057\uffe6\061\uffe6\063\uffe6" +
    "\064\uffe6\065\uffe6\070\uffe6\110\uffe6\111\uffe6\112\uffe6\113" +
    "\uffe6\114\uffe6\172\uffe6\001\002\000\004\170\076\001\002" +
    "\000\074\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\037\ufff2\053\ufff2\057\ufff2\061" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\070\ufff2\110\ufff2\111\ufff2" +
    "\112\ufff2\113\ufff2\114\ufff2\172\ufff2\001\002\000\004\170" +
    "\100\001\002\000\074\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf\053\uffdf" +
    "\057\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\070\uffdf\110" +
    "\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf\172\uffdf\001\002" +
    "\000\004\170\102\001\002\000\074\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\037" +
    "\uffe9\053\uffe9\057\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\070\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9\114\uffe9\172" +
    "\uffe9\001\002\000\004\170\104\001\002\000\074\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\036\uffde\037\uffde\053\uffde\057\uffde\061\uffde\063\uffde\064" +
    "\uffde\065\uffde\070\uffde\110\uffde\111\uffde\112\uffde\113\uffde" +
    "\114\uffde\172\uffde\001\002\000\004\170\106\001\002\000" +
    "\074\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\036\uffea\037\uffea\053\uffea\057\uffea\061\uffea" +
    "\063\uffea\064\uffea\065\uffea\070\uffea\110\uffea\111\uffea\112" +
    "\uffea\113\uffea\114\uffea\172\uffea\001\002\000\004\170\110" +
    "\001\002\000\074\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\036\uffe5\037\uffe5\053\uffe5\057" +
    "\uffe5\061\uffe5\063\uffe5\064\uffe5\065\uffe5\070\uffe5\110\uffe5" +
    "\111\uffe5\112\uffe5\113\uffe5\114\uffe5\172\uffe5\001\002\000" +
    "\004\170\112\001\002\000\074\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\037\ufff0" +
    "\053\ufff0\057\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0\070" +
    "\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\114\ufff0\172\ufff0" +
    "\001\002\000\004\170\114\001\002\000\074\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\036" +
    "\uffe2\037\uffe2\053\uffe2\057\uffe2\061\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\070\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2\114" +
    "\uffe2\172\uffe2\001\002\000\004\170\116\001\002\000\074" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\036\uffe0\037\uffe0\053\uffe0\057\uffe0\061\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\070\uffe0\110\uffe0\111\uffe0\112\uffe0" +
    "\113\uffe0\114\uffe0\172\uffe0\001\002\000\114\115\uffd7\116" +
    "\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7" +
    "\127\uffd7\130\uffd7\131\uffd7\132\uffd7\133\uffd7\134\uffd7\135" +
    "\uffd7\136\uffd7\137\uffd7\140\uffd7\141\uffd7\142\uffd7\143\uffd7" +
    "\144\uffd7\145\uffd7\146\uffd7\147\uffd7\150\uffd7\151\uffd7\152" +
    "\uffd7\153\uffd7\154\uffd7\155\uffd7\156\uffd7\157\uffd7\160\uffd7" +
    "\161\uffd7\163\uffd7\166\uffd7\001\002\000\114\115\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6" +
    "\127\uffd6\130\uffd6\131\uffd6\132\uffd6\133\uffd6\134\uffd6\135" +
    "\uffd6\136\uffd6\137\uffd6\140\uffd6\141\uffd6\142\uffd6\143\uffd6" +
    "\144\uffd6\145\uffd6\146\uffd6\147\uffd6\150\uffd6\151\uffd6\152" +
    "\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6\157\uffd6\160\uffd6" +
    "\161\uffd6\163\uffd6\166\uffd6\001\002\000\114\115\164\116" +
    "\123\117\170\120\127\121\153\122\157\123\160\124\162" +
    "\127\154\130\161\131\150\132\155\133\152\134\142\135" +
    "\130\136\134\137\132\140\126\141\165\142\131\143\124" +
    "\144\125\145\151\146\156\147\146\150\145\151\144\152" +
    "\143\153\141\154\140\155\137\156\136\157\135\160\133" +
    "\161\166\163\147\166\163\001\002\000\114\115\uffd8\116" +
    "\uffd8\117\uffd8\120\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8" +
    "\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\134\uffd8\135" +
    "\uffd8\136\uffd8\137\uffd8\140\uffd8\141\uffd8\142\uffd8\143\uffd8" +
    "\144\uffd8\145\uffd8\146\uffd8\147\uffd8\150\uffd8\151\uffd8\152" +
    "\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8\157\uffd8\160\uffd8" +
    "\161\uffd8\163\uffd8\166\uffd8\001\002\000\004\170\uffd4\001" +
    "\002\000\004\170\uffbf\001\002\000\004\170\uffbe\001\002" +
    "\000\004\170\uffc2\001\002\000\004\170\uffd2\001\002\000" +
    "\004\170\uffc7\001\002\000\004\170\uffc4\001\002\000\004" +
    "\170\uffc3\001\002\000\004\170\uffb4\001\002\000\004\170" +
    "\uffc6\001\002\000\004\170\uffb5\001\002\000\004\170\uffb6" +
    "\001\002\000\004\170\uffb7\001\002\000\004\170\uffb8\001" +
    "\002\000\004\170\uffb9\001\002\000\004\170\uffc8\001\002" +
    "\000\004\170\uffba\001\002\000\004\170\uffbb\001\002\000" +
    "\004\170\uffbc\001\002\000\004\170\uffbd\001\002\000\004" +
    "\170\uffb2\001\002\000\004\170\uffcb\001\002\000\004\170" +
    "\uffc1\001\002\000\004\170\uffc9\001\002\000\004\170\uffd1" +
    "\001\002\000\004\170\uffcd\001\002\000\004\170\uffca\001" +
    "\002\000\004\170\uffc0\001\002\000\004\170\uffd0\001\002" +
    "\000\004\170\uffcf\001\002\000\004\170\uffcc\001\002\000" +
    "\004\170\uffce\001\002\000\004\170\uffb1\001\002\000\004" +
    "\170\uffd5\001\002\000\004\170\uffc5\001\002\000\004\170" +
    "\uffb3\001\002\000\004\170\171\001\002\000\004\170\uffd3" +
    "\001\002\000\074\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\053\uffdc\057" +
    "\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc\070\uffdc\110\uffdc" +
    "\111\uffdc\112\uffdc\113\uffdc\114\uffdc\172\uffdc\001\002\000" +
    "\004\170\173\001\002\000\074\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\036\uffed\037\uffed" +
    "\053\uffed\057\uffed\061\uffed\063\uffed\064\uffed\065\uffed\070" +
    "\uffed\110\uffed\111\uffed\112\uffed\113\uffed\114\uffed\172\uffed" +
    "\001\002\000\004\170\175\001\002\000\074\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\037\uffe3\053\uffe3\057\uffe3\061\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\070\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3\114" +
    "\uffe3\172\uffe3\001\002\000\004\170\177\001\002\000\074" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\036\uffdd\037\uffdd\053\uffdd\057\uffdd\061\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\070\uffdd\110\uffdd\111\uffdd\112\uffdd" +
    "\113\uffdd\114\uffdd\172\uffdd\001\002\000\074\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036" +
    "\ufff5\037\ufff5\053\ufff5\057\ufff5\061\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\070\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114" +
    "\ufff5\172\ufff5\001\002\000\004\170\202\001\002\000\074" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\036\uffe4\037\uffe4\053\uffe4\057\uffe4\061\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\070\uffe4\110\uffe4\111\uffe4\112\uffe4" +
    "\113\uffe4\114\uffe4\172\uffe4\001\002\000\004\170\204\001" +
    "\002\000\074\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\053\uffd9\057\uffd9" +
    "\061\uffd9\063\uffd9\064\uffd9\065\uffd9\070\uffd9\110\uffd9\111" +
    "\uffd9\112\uffd9\113\uffd9\114\uffd9\172\uffd9\001\002\000\004" +
    "\171\206\001\002\000\070\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb\053" +
    "\uffdb\057\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\070\uffdb" +
    "\110\uffdb\113\uffdb\114\uffdb\172\uffdb\001\002\000\070\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\036\uffab\037\uffab\053\uffab\057\uffab\061\uffab\063\uffab" +
    "\064\uffab\065\uffab\070\uffab\110\uffab\113\uffab\114\uffab\172" +
    "\uffab\001\002\000\004\172\220\001\002\000\070\004\056" +
    "\005\046\006\017\007\040\010\052\011\015\016\032\017" +
    "\016\020\023\021\042\031\044\032\051\033\055\034\047" +
    "\036\026\037\041\053\037\057\022\061\034\063\031\064" +
    "\045\065\043\070\030\110\033\113\213\114\025\172\uffad" +
    "\001\002\000\070\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\016\uffac\017\uffac\020\uffac\021\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\036\uffac\037\uffac\053\uffac\057" +
    "\uffac\061\uffac\063\uffac\064\uffac\065\uffac\070\uffac\110\uffac" +
    "\113\uffac\114\uffac\172\uffac\001\002\000\004\170\217\001" +
    "\002\000\070\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\053\uffaa\057\uffaa" +
    "\061\uffaa\063\uffaa\064\uffaa\065\uffaa\070\uffaa\110\uffaa\113" +
    "\uffaa\114\uffaa\172\uffaa\001\002\000\070\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9" +
    "\037\uffa9\053\uffa9\057\uffa9\061\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\070\uffa9\110\uffa9\113\uffa9\114\uffa9\172\uffa9\001\002" +
    "\000\070\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\036\uffa8\037\uffa8\053\uffa8\057\uffa8\061" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\070\uffa8\110\uffa8\113\uffa8" +
    "\114\uffa8\172\uffa8\001\002\000\070\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\036\uffa7\037" +
    "\uffa7\053\uffa7\057\uffa7\061\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\070\uffa7\110\uffa7\113\uffa7\114\uffa7\172\uffa7\001\002\000" +
    "\074\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\036\uffda\037\uffda\053\uffda\057\uffda\061\uffda" +
    "\063\uffda\064\uffda\065\uffda\070\uffda\110\uffda\111\uffda\112" +
    "\uffda\113\uffda\114\uffda\172\uffda\001\002\000\004\170\222" +
    "\001\002\000\074\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\036\uffeb\037\uffeb\053\uffeb\057" +
    "\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\070\uffeb\110\uffeb" +
    "\111\uffeb\112\uffeb\113\uffeb\114\uffeb\172\uffeb\001\002\000" +
    "\004\170\224\001\002\000\074\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1" +
    "\053\uffe1\057\uffe1\061\uffe1\063\uffe1\064\uffe1\065\uffe1\070" +
    "\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\114\uffe1\172\uffe1" +
    "\001\002\000\004\170\226\001\002\000\074\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\036" +
    "\ufff1\037\ufff1\053\ufff1\057\ufff1\061\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\070\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\114" +
    "\ufff1\172\ufff1\001\002\000\004\170\230\001\002\000\074" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\036\uffec\037\uffec\053\uffec\057\uffec\061\uffec\063" +
    "\uffec\064\uffec\065\uffec\070\uffec\110\uffec\111\uffec\112\uffec" +
    "\113\uffec\114\uffec\172\uffec\001\002\000\004\170\232\001" +
    "\002\000\074\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\016\uffee\017\uffee\020\uffee\021\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\036\uffee\037\uffee\053\uffee\057\uffee" +
    "\061\uffee\063\uffee\064\uffee\065\uffee\070\uffee\110\uffee\111" +
    "\uffee\112\uffee\113\uffee\114\uffee\172\uffee\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\010\002\003\003\005\020\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\012\001\001\000\004\004\013\001\001\000\014" +
    "\005\017\006\034\007\035\010\052\011\047\001\001\000" +
    "\004\014\230\001\001\000\004\014\226\001\001\000\004" +
    "\014\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\222\001\001\000\004\014\220\001\001\000\002" +
    "\001\001\000\004\014\202\001\001\000\004\014\200\001" +
    "\001\000\002\001\001\000\004\014\175\001\001\000\004" +
    "\014\173\001\001\000\004\014\171\001\001\000\004\012" +
    "\120\001\001\000\004\014\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\112\001\001\000\004\014" +
    "\110\001\001\000\004\014\106\001\001\000\004\014\104" +
    "\001\001\000\004\014\102\001\001\000\004\014\100\001" +
    "\001\000\004\014\076\001\001\000\004\014\074\001\001" +
    "\000\004\014\072\001\001\000\002\001\001\000\004\014" +
    "\070\001\001\000\004\014\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\063\001\001\000\004\014" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\206\001\001\000\006\015\207\016" +
    "\210\001\001\000\002\001\001\000\012\006\213\010\215" +
    "\011\214\017\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Semantic semantic = new Semantic();
    private String currentProfile = null;
    private String currentAlias = null;

    public Semantic getSemantic() {
        return semantic;
    }
    
    public void syntax_error(Symbol s) {
        System.err.println("Erro de sintaxe na linha " + (s.left+1) + 
                          ", coluna " + (s.right+1) + ": " + s.value);
    }
    
    public void unrecovered_syntax_error(Symbol s) {
        System.err.println("Erro de sintaxe irrecuperável na linha " + (s.left+1) + 
                          ", coluna " + (s.right+1) + ": " + s.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= profile_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // profile_list ::= profile_list profile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("profile_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // profile_list ::= profile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("profile_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                currentProfile = (String)name;
                semantic.startProfile(currentProfile); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // profile ::= PROFILE ID LBRACE NT$0 statement_list RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                currentProfile = null;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("profile",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= config_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= bind_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= var_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= echo_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= CLEAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= HOST_WRITECONFIG SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // config_statement ::= R_FULLSCREEN_GAMMA value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "gama", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // config_statement ::= FPS_MAX value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "fps_max", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // config_statement ::= HUD_SCALING value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "escala_hud", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // config_statement ::= HUD_SHOWTARGETID value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "id_inimigo", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // config_statement ::= CL_COLOR value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "cor", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // config_statement ::= CL_HUD_COLOR value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "cor_hud", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // config_statement ::= CL_HUD_RADAR_SCALE value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "radar_escala", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // config_statement ::= CL_RADAR_SCALE value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "radar_escala_interno", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // config_statement ::= CL_RADAR_ALWAYS_CENTERED value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "radar_centralizado", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // config_statement ::= CL_RADAR_ROTATE value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "rotar_radar", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // config_statement ::= CL_CROSSHAIRSTYLE value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "estilo_mira", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // config_statement ::= CL_CROSSHAIRSIZE value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "tamanho_mira", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // config_statement ::= CL_CROSSHAIRTHICKNESS value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "espessura_mira", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // config_statement ::= CL_CROSSHAIRGAP value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "espacamento_mira", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // config_statement ::= CL_CROSSHAIRCOLOR value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "cor_mira", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // config_statement ::= CL_CROSSHAIRALPHA value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "transparencia_mira", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // config_statement ::= VOLUME value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "volume_geral", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // config_statement ::= SND_MENUMUSIC_VOLUME value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "volume_menu", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // config_statement ::= SND_MVP_VOLUME value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "volume_mvp", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // config_statement ::= SND_VOIPVOLUME value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "volume_voip", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // config_statement ::= SENSITIVITY value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "sensibilidade", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // config_statement ::= ZOOM_SENSITIVITY_RATIO value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "sensibilidade_zoom", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // config_statement ::= CON_ENABLE value SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addConfig(currentProfile, "console", (String)v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bind_statement ::= BIND key action_or_alias SEMICOLON 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                      if (currentAlias != null) {
                          semantic.addAliasBind(currentProfile, currentAlias, (String)k, (String)a);
                      } else {
                          semantic.addBind(currentProfile, (String)k, (String)a);
                      }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bind_statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                     currentAlias = (String)name;
                     semantic.startAlias(currentProfile, currentAlias);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_statement ::= ALIAS ID LBRACE NT$1 alias_body RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                     currentAlias = null;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // echo_statement ::= ECHO value SEMICOLON 
            {
              Object RESULT =null;
		int msgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int msgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object msg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 semantic.addMessage(currentProfile, (String)msg); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("echo_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // key ::= SKEY 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)k; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // key ::= ID 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)k; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // key ::= STRING 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)k; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // action_or_alias ::= PLUS_FORWARD 
            {
              Object RESULT =null;
		 RESULT = "+frente"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // action_or_alias ::= MINUS_FORWARD 
            {
              Object RESULT =null;
		 RESULT = "-frente"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // action_or_alias ::= PLUS_BACK 
            {
              Object RESULT =null;
		 RESULT = "+tras"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // action_or_alias ::= MINUS_BACK 
            {
              Object RESULT =null;
		 RESULT = "-tras"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // action_or_alias ::= PLUS_LEFT 
            {
              Object RESULT =null;
		 RESULT = "+esquerda"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // action_or_alias ::= MINUS_LEFT 
            {
              Object RESULT =null;
		 RESULT = "-esquerda"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // action_or_alias ::= PLUS_RIGHT 
            {
              Object RESULT =null;
		 RESULT = "+direita"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // action_or_alias ::= MINUS_RIGHT 
            {
              Object RESULT =null;
		 RESULT = "-direita"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // action_or_alias ::= PLUS_JUMP 
            {
              Object RESULT =null;
		 RESULT = "+pular"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // action_or_alias ::= MINUS_JUMP 
            {
              Object RESULT =null;
		 RESULT = "-pular"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // action_or_alias ::= PLUS_DUCK 
            {
              Object RESULT =null;
		 RESULT = "+agachar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // action_or_alias ::= MINUS_DUCK 
            {
              Object RESULT =null;
		 RESULT = "-agachar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // action_or_alias ::= PLUS_ATTACK 
            {
              Object RESULT =null;
		 RESULT = "+atacar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // action_or_alias ::= MINUS_ATTACK 
            {
              Object RESULT =null;
		 RESULT = "-atacar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // action_or_alias ::= PLUS_ATTACK2 
            {
              Object RESULT =null;
		 RESULT = "+atacar2"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // action_or_alias ::= MINUS_ATTACK2 
            {
              Object RESULT =null;
		 RESULT = "-atacar2"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // action_or_alias ::= PLUS_USE 
            {
              Object RESULT =null;
		 RESULT = "+usar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // action_or_alias ::= MINUS_USE 
            {
              Object RESULT =null;
		 RESULT = "-usar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // action_or_alias ::= PLUS_RELOAD 
            {
              Object RESULT =null;
		 RESULT = "+recarregar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // action_or_alias ::= MINUS_RELOAD 
            {
              Object RESULT =null;
		 RESULT = "-recarregar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // action_or_alias ::= PLUS_VOICERECORD 
            {
              Object RESULT =null;
		 RESULT = "+mic"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // action_or_alias ::= MINUS_VOICERECORD 
            {
              Object RESULT =null;
		 RESULT = "-mic"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // action_or_alias ::= PLUS_SCORE 
            {
              Object RESULT =null;
		 RESULT = "+placar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // action_or_alias ::= MINUS_SCORE 
            {
              Object RESULT =null;
		 RESULT = "-placar"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // action_or_alias ::= SLOT1 
            {
              Object RESULT =null;
		 RESULT = "slot1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // action_or_alias ::= SLOT2 
            {
              Object RESULT =null;
		 RESULT = "slot2"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // action_or_alias ::= SLOT3 
            {
              Object RESULT =null;
		 RESULT = "slot3"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // action_or_alias ::= SLOT4 
            {
              Object RESULT =null;
		 RESULT = "slot4"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // action_or_alias ::= SLOT5 
            {
              Object RESULT =null;
		 RESULT = "slot5"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // action_or_alias ::= SLOT6 
            {
              Object RESULT =null;
		 RESULT = "slot6"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // action_or_alias ::= SLOT7 
            {
              Object RESULT =null;
		 RESULT = "slot7"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // action_or_alias ::= SLOT8 
            {
              Object RESULT =null;
		 RESULT = "slot8"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // action_or_alias ::= SLOT9 
            {
              Object RESULT =null;
		 RESULT = "slot9"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // action_or_alias ::= SLOT10 
            {
              Object RESULT =null;
		 RESULT = "slot10"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // action_or_alias ::= TOGGLECONSOLE 
            {
              Object RESULT =null;
		 RESULT = "toggleconsole"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // action_or_alias ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // action_or_alias ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_or_alias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // value ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // value ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // value ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (String)id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // alias_body ::= alias_statement_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_body",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // alias_statement_list ::= alias_statement_list alias_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alias_statement_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // alias_statement ::= bind_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // alias_statement ::= config_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // alias_statement ::= echo_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // alias_statement ::= CLEAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
