// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\12\0"+
    "\1\4\1\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\3\13\4\14\1\0\1\15\5\0\32\16\4\0\1\17"+
    "\1\0\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\16\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\u0382\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\1\4\23\5\1\6"+
    "\1\7\10\1\1\10\1\1\15\5\2\11\37\5\14\1"+
    "\1\3\6\5\1\12\25\5\1\13\16\5\1\11\4\5"+
    "\1\14\2\5\14\1\23\5\1\15\37\5\5\1\1\16"+
    "\5\1\1\17\54\5\1\20\2\5\1\21\2\5\3\1"+
    "\1\22\4\1\1\23\1\1\27\5\1\24\11\5\1\25"+
    "\6\5\1\26\5\5\1\27\1\30\1\31\2\5\1\1"+
    "\1\32\1\33\2\1\1\34\1\35\1\1\5\5\1\36"+
    "\2\5\1\37\45\5\1\40\1\1\1\41\1\1\6\5"+
    "\1\42\1\43\27\5\1\44\21\5\2\1\7\5\1\45"+
    "\1\46\1\47\24\5\1\50\26\5\2\1\14\5\1\51"+
    "\5\5\1\52\12\5\1\53\2\5\1\54\15\5\1\55"+
    "\1\5\1\56\1\57\5\5\1\60\4\5\1\61\3\5"+
    "\1\62\16\5\1\63\13\5\1\64\1\65\3\5\1\66"+
    "\5\5\1\67\10\5\1\70\2\5\1\71\3\5\1\72"+
    "\2\5\1\73\6\5\1\74\5\5\1\75\22\5\1\76"+
    "\21\5\1\77\2\5\1\100\24\5\1\101\13\5\1\102"+
    "\21\5\1\103\4\5\1\104\1\105\2\5\1\106\1\5"+
    "\1\107\1\5\1\110\26\5\1\111\1\112\10\5\1\113"+
    "\1\5\1\114\1\5\1\115\7\5\1\116\1\5\1\117"+
    "\1\120\1\5\1\121\1\5\1\122\6\5\1\123\1\5"+
    "\1\124\1\5\1\125\1\5\1\126\4\5\1\127\1\5"+
    "\1\130\1\131\1\132\3\5\1\133\5\5\1\134\2\5"+
    "\1\135\1\5\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[828];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\53\0\53\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u0183\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0637\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1"+
    "\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9"+
    "\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351"+
    "\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u0183"+
    "\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6"+
    "\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e"+
    "\0\u1759\0\u1784\0\u17af\0\u0183\0\u17da\0\u1805\0\u1830\0\u185b"+
    "\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63"+
    "\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u0183\0\u1d65\0\u1d90"+
    "\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8"+
    "\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040"+
    "\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198"+
    "\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0"+
    "\0\u231b\0\u2346\0\53\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d"+
    "\0\53\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a"+
    "\0\u2575\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2"+
    "\0\u26cd\0\u26f8\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa"+
    "\0\u2825\0\u2850\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952"+
    "\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa"+
    "\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56\0\u2b81\0\u0183\0\u2bac\0\u2bd7"+
    "\0\u2c02\0\u2c2d\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\53\0\u2d04"+
    "\0\u2d2f\0\u2d5a\0\u2d85\0\53\0\u2db0\0\u2ddb\0\u2e06\0\u2e31"+
    "\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33\0\u2f5e\0\u2f89"+
    "\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060\0\u308b\0\u30b6\0\u30e1"+
    "\0\u310c\0\u3137\0\u3162\0\u318d\0\u0183\0\u31b8\0\u31e3\0\u320e"+
    "\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5\0\u3310\0\u0183\0\u333b"+
    "\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u0183\0\u343d\0\u3468"+
    "\0\u3493\0\u34be\0\u34e9\0\u0183\0\u0183\0\u0183\0\u3514\0\u353f"+
    "\0\u356a\0\53\0\53\0\u3595\0\u35c0\0\53\0\53\0\u35eb"+
    "\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2\0\u0183\0\u36ed\0\u3718"+
    "\0\u0183\0\u3743\0\u376e\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845"+
    "\0\u3870\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972\0\u399d"+
    "\0\u39c8\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5"+
    "\0\u3b20\0\u3b4b\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d"+
    "\0\u3c78\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\53\0\u3d7a"+
    "\0\53\0\u3da5\0\u3dd0\0\u3dfb\0\u3e26\0\u3e51\0\u3e7c\0\u3ea7"+
    "\0\u0183\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4"+
    "\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\u40d6\0\u4101\0\u412c"+
    "\0\u4157\0\u4182\0\u41ad\0\u41d8\0\u4203\0\u422e\0\u4259\0\u4284"+
    "\0\u42af\0\u0183\0\u42da\0\u4305\0\u4330\0\u435b\0\u4386\0\u43b1"+
    "\0\u43dc\0\u4407\0\u4432\0\u445d\0\u4488\0\u44b3\0\u44de\0\u4509"+
    "\0\u4534\0\u455f\0\u458a\0\u45b5\0\u45e0\0\u460b\0\u4636\0\u4661"+
    "\0\u468c\0\u46b7\0\u46e2\0\u470d\0\u0183\0\u0183\0\u0183\0\u4738"+
    "\0\u4763\0\u478e\0\u47b9\0\u47e4\0\u480f\0\u483a\0\u4865\0\u4890"+
    "\0\u48bb\0\u48e6\0\u4911\0\u493c\0\u4967\0\u4992\0\u49bd\0\u49e8"+
    "\0\u4a13\0\u4a3e\0\u4a69\0\u0183\0\u4a94\0\u4abf\0\u4aea\0\u4b15"+
    "\0\u4b40\0\u4b6b\0\u4b96\0\u4bc1\0\u4bec\0\u4c17\0\u4c42\0\u4c6d"+
    "\0\u4c98\0\u4cc3\0\u4cee\0\u4d19\0\u4d44\0\u4d6f\0\u4d9a\0\u4dc5"+
    "\0\u4df0\0\u4e1b\0\u4e46\0\u4e71\0\u4e9c\0\u4ec7\0\u4ef2\0\u4f1d"+
    "\0\u4f48\0\u4f73\0\u4f9e\0\u4fc9\0\u4ff4\0\u501f\0\u504a\0\u5075"+
    "\0\u0183\0\u50a0\0\u50cb\0\u50f6\0\u5121\0\u514c\0\u0183\0\u5177"+
    "\0\u51a2\0\u51cd\0\u51f8\0\u5223\0\u524e\0\u5279\0\u52a4\0\u52cf"+
    "\0\u52fa\0\u0183\0\u5325\0\u5350\0\u0183\0\u537b\0\u53a6\0\u53d1"+
    "\0\u53fc\0\u5427\0\u5452\0\u547d\0\u54a8\0\u54d3\0\u54fe\0\u5529"+
    "\0\u5554\0\u557f\0\u0183\0\u55aa\0\53\0\53\0\u55d5\0\u5600"+
    "\0\u562b\0\u5656\0\u5681\0\u0183\0\u56ac\0\u56d7\0\u5702\0\u572d"+
    "\0\u0183\0\u5758\0\u5783\0\u57ae\0\u0183\0\u57d9\0\u5804\0\u582f"+
    "\0\u585a\0\u5885\0\u58b0\0\u58db\0\u5906\0\u5931\0\u595c\0\u5987"+
    "\0\u59b2\0\u59dd\0\u5a08\0\u0183\0\u5a33\0\u5a5e\0\u5a89\0\u5ab4"+
    "\0\u5adf\0\u5b0a\0\u5b35\0\u5b60\0\u5b8b\0\u5bb6\0\u5be1\0\u0183"+
    "\0\u0183\0\u5c0c\0\u5c37\0\u5c62\0\u0183\0\u5c8d\0\u5cb8\0\u5ce3"+
    "\0\u5d0e\0\u5d39\0\u0183\0\u5d64\0\u5d8f\0\u5dba\0\u5de5\0\u5e10"+
    "\0\u5e3b\0\u5e66\0\u5e91\0\u0183\0\u5ebc\0\u5ee7\0\u0183\0\u5f12"+
    "\0\u5f3d\0\u5f68\0\u5f93\0\u5fbe\0\u5fe9\0\u6014\0\u603f\0\u606a"+
    "\0\u6095\0\u60c0\0\u60eb\0\u6116\0\u0183\0\u6141\0\u616c\0\u6197"+
    "\0\u61c2\0\u61ed\0\u0183\0\u6218\0\u6243\0\u626e\0\u6299\0\u62c4"+
    "\0\u62ef\0\u631a\0\u6345\0\u6370\0\u639b\0\u63c6\0\u63f1\0\u641c"+
    "\0\u6447\0\u6472\0\u649d\0\u64c8\0\u64f3\0\u651e\0\u6549\0\u6574"+
    "\0\u659f\0\u65ca\0\u65f5\0\u6620\0\u664b\0\u6676\0\u66a1\0\u66cc"+
    "\0\u66f7\0\u6722\0\u674d\0\u6778\0\u67a3\0\u67ce\0\u67f9\0\u0183"+
    "\0\u6824\0\u684f\0\u0183\0\u687a\0\u68a5\0\u68d0\0\u68fb\0\u6926"+
    "\0\u6951\0\u697c\0\u69a7\0\u69d2\0\u69fd\0\u6a28\0\u6a53\0\u6a7e"+
    "\0\u6aa9\0\u6ad4\0\u6aff\0\u6b2a\0\u6b55\0\u6b80\0\u6bab\0\u0183"+
    "\0\u6bd6\0\u6c01\0\u6c2c\0\u6c57\0\u6c82\0\u6cad\0\u6cd8\0\u6d03"+
    "\0\u6d2e\0\u6d59\0\u6d84\0\u0183\0\u6daf\0\u6dda\0\u6e05\0\u6e30"+
    "\0\u6e5b\0\u6e86\0\u6eb1\0\u6edc\0\u6f07\0\u6f32\0\u6f5d\0\u6f88"+
    "\0\u6fb3\0\u6fde\0\u7009\0\u7034\0\u705f\0\u0183\0\u708a\0\u70b5"+
    "\0\u70e0\0\u710b\0\u0183\0\u0183\0\u7136\0\u7161\0\u0183\0\u718c"+
    "\0\u0183\0\u71b7\0\u0183\0\u71e2\0\u720d\0\u7238\0\u7263\0\u728e"+
    "\0\u72b9\0\u72e4\0\u730f\0\u733a\0\u7365\0\u7390\0\u73bb\0\u73e6"+
    "\0\u7411\0\u743c\0\u7467\0\u7492\0\u74bd\0\u74e8\0\u7513\0\u753e"+
    "\0\u7569\0\u0183\0\u0183\0\u7594\0\u75bf\0\u75ea\0\u7615\0\u7640"+
    "\0\u766b\0\u7696\0\u76c1\0\u0183\0\u76ec\0\u0183\0\u7717\0\u0183"+
    "\0\u7742\0\u776d\0\u7798\0\u77c3\0\u77ee\0\u7819\0\u7844\0\u0183"+
    "\0\u786f\0\u0183\0\u0183\0\u789a\0\u0183\0\u78c5\0\u0183\0\u78f0"+
    "\0\u791b\0\u7946\0\u7971\0\u799c\0\u79c7\0\u0183\0\u79f2\0\u0183"+
    "\0\u7a1d\0\u0183\0\u7a48\0\u0183\0\u7a73\0\u7a9e\0\u7ac9\0\u7af4"+
    "\0\u0183\0\u7b1f\0\u0183\0\u0183\0\u0183\0\u7b4a\0\u7b75\0\u7ba0"+
    "\0\u0183\0\u7bcb\0\u7bf6\0\u7c21\0\u7c4c\0\u7c77\0\u0183\0\u7ca2"+
    "\0\u7ccd\0\u0183\0\u7cf8\0\u0183";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[828];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\5\10"+
    "\1\11\2\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\12\1\24\1\25\1\26\1\12"+
    "\1\27\1\12\1\30\1\31\1\32\1\33\1\34\4\12"+
    "\1\35\1\36\2\2\2\0\11\2\1\0\36\2\1\3"+
    "\2\4\11\2\1\0\35\2\1\0\3\4\47\0\2\2"+
    "\2\0\11\2\1\0\2\2\1\37\15\2\1\40\1\2"+
    "\1\41\2\2\1\42\11\2\2\0\11\2\1\0\2\2"+
    "\1\43\15\2\1\44\1\2\1\45\2\2\1\46\11\2"+
    "\2\0\3\2\1\47\5\2\1\0\37\2\2\0\2\2"+
    "\1\50\1\2\5\10\1\0\35\2\53\0\2\2\2\0"+
    "\4\2\5\12\1\0\33\12\4\2\2\0\4\2\5\12"+
    "\1\0\14\12\1\51\1\12\1\52\6\12\1\53\5\12"+
    "\4\2\2\0\4\2\5\12\1\0\25\12\1\54\5\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\55\4\12"+
    "\1\56\6\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\57\10\12\1\60\13\12\4\2\2\0\4\2\5\12"+
    "\1\0\4\12\1\61\11\12\1\62\2\12\1\63\1\12"+
    "\1\64\4\12\1\65\2\12\4\2\2\0\4\2\1\12"+
    "\1\66\3\67\1\0\33\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\70\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\71\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\5\12\1\72\25\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\73\3\12\1\74\3\12\1\75\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\76\3\12"+
    "\1\77\4\12\1\100\3\12\1\101\1\12\1\102\1\12"+
    "\1\103\3\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\104\13\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\105\3\12\1\106\4\12\1\107\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\110\3\12\1\111\3\12"+
    "\1\112\4\12\1\113\13\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\114\3\12\1\115\2\12\1\116\6\12"+
    "\1\117\12\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\120\3\12\1\121\13\12\1\122\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\20\12\1\123\12\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\124\7\12\1\125\4\12"+
    "\1\126\13\12\4\2\2\0\11\2\1\0\10\2\1\127"+
    "\13\2\1\130\12\2\2\0\11\2\1\0\14\2\1\131"+
    "\10\2\1\132\11\2\2\0\11\2\1\0\6\2\1\133"+
    "\30\2\2\0\11\2\1\0\23\2\1\134\13\2\2\0"+
    "\11\2\1\0\10\2\1\135\13\2\1\136\12\2\2\0"+
    "\11\2\1\0\14\2\1\137\10\2\1\140\11\2\2\0"+
    "\11\2\1\0\6\2\1\141\30\2\2\0\11\2\1\0"+
    "\23\2\1\142\11\2\2\47\1\0\50\47\2\2\2\0"+
    "\4\2\5\143\1\0\37\2\2\0\4\2\5\12\1\0"+
    "\24\12\1\67\6\12\4\2\2\0\4\2\5\12\1\0"+
    "\12\12\1\144\12\12\1\145\5\12\4\2\2\0\4\2"+
    "\5\12\1\0\24\12\1\146\6\12\4\2\2\0\4\2"+
    "\5\12\1\0\7\12\1\147\23\12\4\2\2\0\4\2"+
    "\5\12\1\0\15\12\1\150\1\151\3\12\1\152\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\153\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\14\12\1\154\16\12"+
    "\4\2\2\0\4\2\5\12\1\0\27\12\1\155\3\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\156\13\12"+
    "\4\2\2\0\4\2\5\12\1\0\24\12\1\157\6\12"+
    "\4\2\2\0\4\2\5\12\1\0\25\12\1\160\5\12"+
    "\4\2\2\0\4\2\5\12\1\0\4\12\1\161\13\12"+
    "\1\162\3\12\1\163\6\12\4\2\2\0\4\2\5\12"+
    "\1\0\20\12\1\164\12\12\4\2\2\0\4\2\3\67"+
    "\2\12\1\0\33\12\4\2\2\0\4\2\5\12\1\0"+
    "\15\12\1\165\15\12\4\2\2\0\4\2\5\12\1\0"+
    "\3\12\1\166\27\12\4\2\2\0\4\2\5\12\1\0"+
    "\1\12\1\167\31\12\4\2\2\0\4\2\5\12\1\0"+
    "\24\12\1\170\6\12\4\2\2\0\4\2\5\12\1\0"+
    "\7\12\1\171\23\12\4\2\2\0\4\2\5\12\1\0"+
    "\15\12\1\172\15\12\4\2\2\0\4\2\5\12\1\0"+
    "\16\12\1\173\14\12\4\2\2\0\4\2\5\12\1\0"+
    "\22\12\1\174\10\12\4\2\2\0\4\2\5\12\1\0"+
    "\5\12\1\175\15\12\1\176\1\12\1\177\5\12\4\2"+
    "\2\0\4\2\5\12\1\0\10\12\1\200\22\12\4\2"+
    "\2\0\4\2\5\12\1\0\24\12\1\201\6\12\4\2"+
    "\2\0\4\2\5\12\1\0\11\12\1\202\21\12\4\2"+
    "\2\0\4\2\5\12\1\0\24\12\1\203\6\12\4\2"+
    "\2\0\4\2\5\12\1\0\22\12\1\204\10\12\4\2"+
    "\2\0\4\2\5\12\1\0\16\12\1\205\14\12\4\2"+
    "\2\0\4\2\5\12\1\0\16\12\1\206\14\12\4\2"+
    "\2\0\4\2\5\12\1\0\5\12\1\207\25\12\4\2"+
    "\2\0\4\2\5\12\1\0\4\12\1\210\26\12\4\2"+
    "\2\0\4\2\5\12\1\0\10\12\1\211\22\12\4\2"+
    "\2\0\4\2\5\12\1\0\24\12\1\212\6\12\4\2"+
    "\2\0\4\2\5\12\1\0\14\12\1\213\16\12\4\2"+
    "\2\0\4\2\5\12\1\0\16\12\1\214\14\12\4\2"+
    "\2\0\4\2\5\12\1\0\12\12\1\215\20\12\4\2"+
    "\2\0\4\2\5\12\1\0\2\12\1\216\30\12\4\2"+
    "\2\0\4\2\5\12\1\0\3\12\1\217\11\12\1\220"+
    "\15\12\4\2\2\0\4\2\5\12\1\0\4\12\1\221"+
    "\26\12\4\2\2\0\4\2\5\12\1\0\2\12\1\222"+
    "\30\12\4\2\2\0\4\2\5\12\1\0\2\12\1\223"+
    "\30\12\4\2\2\0\4\2\5\12\1\0\22\12\1\224"+
    "\10\12\4\2\2\0\4\2\5\12\1\0\23\12\1\225"+
    "\7\12\4\2\2\0\4\2\5\12\1\0\14\12\1\226"+
    "\16\12\4\2\2\0\11\2\1\0\2\2\1\227\34\2"+
    "\2\0\11\2\1\0\2\2\1\230\34\2\2\0\11\2"+
    "\1\0\2\2\1\231\34\2\2\0\11\2\1\0\14\2"+
    "\1\232\22\2\2\0\11\2\1\0\4\2\1\233\32\2"+
    "\2\0\11\2\1\0\2\2\1\234\34\2\2\0\11\2"+
    "\1\0\2\2\1\235\34\2\2\0\11\2\1\0\2\2"+
    "\1\236\34\2\2\0\11\2\1\0\2\2\1\237\34\2"+
    "\2\0\11\2\1\0\14\2\1\240\22\2\2\0\11\2"+
    "\1\0\4\2\1\241\32\2\2\0\11\2\1\0\2\2"+
    "\1\242\34\2\2\0\4\2\5\12\1\0\15\12\1\243"+
    "\15\12\4\2\2\0\4\2\5\12\1\0\16\12\1\244"+
    "\14\12\4\2\2\0\4\2\5\12\1\0\17\12\1\245"+
    "\13\12\4\2\2\0\4\2\5\12\1\0\7\12\1\246"+
    "\23\12\4\2\2\0\4\2\5\12\1\0\20\12\1\247"+
    "\12\12\4\2\2\0\4\2\5\12\1\0\23\12\1\250"+
    "\1\251\6\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\252\20\12\1\253\10\12\4\2\2\0\4\2\5\12"+
    "\1\0\14\12\1\67\16\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\254\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\16\12\1\123\14\12\4\2\2\0\4\2\5\12"+
    "\1\0\16\12\1\255\14\12\4\2\2\0\4\2\5\12"+
    "\1\0\6\12\1\256\24\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\257\7\12\1\260\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\261\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\262\3\12\1\263\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\264\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\265\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\266\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\267\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\270\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\271\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\24\12\1\123\6\12"+
    "\4\2\2\0\4\2\5\12\1\0\20\12\1\272\12\12"+
    "\4\2\2\0\4\2\5\12\1\0\23\12\1\273\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\274\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\275\10\12"+
    "\1\276\13\12\4\2\2\0\4\2\5\12\1\0\24\12"+
    "\1\277\6\12\4\2\2\0\4\2\5\12\1\0\23\12"+
    "\1\300\7\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\301\30\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\302\24\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\303\20\12\4\2\2\0\4\2\5\12\1\0\7\12"+
    "\1\304\13\12\1\305\7\12\4\2\2\0\4\2\5\12"+
    "\1\0\10\12\1\306\22\12\4\2\2\0\4\2\5\12"+
    "\1\0\24\12\1\307\6\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\310\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\25\12\1\311\5\12\4\2\2\0\4\2\5\12"+
    "\1\0\11\12\1\171\21\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\312\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\26\12\1\313\4\12\4\2\2\0\4\2\5\12"+
    "\1\0\23\12\1\314\7\12\4\2\2\0\4\2\5\12"+
    "\1\0\7\12\1\51\23\12\4\2\2\0\4\2\5\12"+
    "\1\0\4\12\1\315\26\12\4\2\2\0\4\2\5\12"+
    "\1\0\1\12\1\316\31\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\317\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\14\12\1\320\16\12\4\2\2\0\4\2\5\12"+
    "\1\0\16\12\1\321\14\12\4\2\2\0\4\2\5\12"+
    "\1\0\22\12\1\322\10\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\323\7\12\1\324\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\25\12\1\325\5\12\4\2\2\0"+
    "\11\2\1\0\4\2\1\326\32\2\2\0\11\2\1\0"+
    "\4\2\1\327\32\2\2\0\11\2\1\0\4\2\1\330"+
    "\32\2\2\0\11\2\1\0\2\2\1\331\34\2\2\0"+
    "\11\2\1\0\2\2\1\332\34\2\2\0\11\2\1\0"+
    "\22\2\1\333\14\2\2\0\11\2\1\0\4\2\1\334"+
    "\32\2\2\0\11\2\1\0\4\2\1\335\32\2\2\0"+
    "\11\2\1\0\4\2\1\336\32\2\2\0\11\2\1\0"+
    "\2\2\1\337\34\2\2\0\11\2\1\0\2\2\1\340"+
    "\34\2\2\0\11\2\1\0\22\2\1\341\14\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\342\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\343\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\344\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\345\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\346\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\347\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\350\2\12\1\351\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\11\12\1\352\3\12"+
    "\1\353\15\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\354\24\12\4\2\2\0\4\2\5\12\1\0\31\12"+
    "\1\355\1\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\356\13\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\67\10\12\4\2\2\0\4\2\5\12\1\0\14\12"+
    "\1\357\16\12\4\2\2\0\4\2\5\12\1\0\20\12"+
    "\1\360\12\12\4\2\2\0\4\2\5\12\1\0\14\12"+
    "\1\361\16\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\362\26\12\4\2\2\0\4\2\5\12\1\0\23\12"+
    "\1\363\7\12\4\2\2\0\4\2\5\12\1\0\14\12"+
    "\1\364\16\12\4\2\2\0\4\2\5\12\1\0\23\12"+
    "\1\365\7\12\4\2\2\0\4\2\5\12\1\0\14\12"+
    "\1\366\16\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\367\14\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\370\14\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\371\30\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\372\30\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\373\31\12\4\2\2\0\4\2\5\12\1\0\14\12"+
    "\1\374\16\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\375\31\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\376\10\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\377\24\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u0100\10\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\u0101\24\12\4\2\2\0\4\2\5\12\1\0\7\12"+
    "\1\u0102\23\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u0103\20\12\4\2\2\0\4\2\5\12\1\0\20\12"+
    "\1\u0104\12\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u0105\31\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\u0106\13\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u0107\10\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\u0108\13\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u0109\10\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u010a\30\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u010b\20\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\67\24\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u010c\10\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\u010d\14\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u010e\30\12\4\2\2\0\4\2\5\12\1\0\23\12"+
    "\1\u010f\7\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u0110\10\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\u0111\13\12\4\2\2\0\4\2\5\12\1\0\3\12"+
    "\1\u0112\27\12\4\2\2\0\4\2\5\12\1\0\15\12"+
    "\1\u0113\15\12\4\2\2\0\11\2\1\0\11\2\1\u0114"+
    "\25\2\2\0\11\2\1\0\2\2\1\u0115\34\2\2\0"+
    "\11\2\1\0\2\2\1\u0116\34\2\2\0\11\2\1\0"+
    "\22\2\1\u0117\14\2\2\0\11\2\1\0\22\2\1\u0118"+
    "\14\2\2\0\11\2\1\0\11\2\1\u0119\25\2\2\0"+
    "\11\2\1\0\2\2\1\u011a\34\2\2\0\11\2\1\0"+
    "\2\2\1\u011b\34\2\2\0\11\2\1\0\22\2\1\u011c"+
    "\14\2\2\0\11\2\1\0\22\2\1\u011d\14\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\u011e\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u011f\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0120\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0121\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0122\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\14\12\1\u0123\16\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0124\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0125\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\25\12\1\u0126\5\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0127\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\u0128\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u0129\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u012a\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u012b\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u012c\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u012d\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u012e\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\23\12\1\u012f\7\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0130\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\23\12\1\u0131\7\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0132\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0133\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\u0134\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0135\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\10\12\1\u0136\22\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u0137\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0138\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0139\10\12\1\u013a\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u013b\30\12"+
    "\4\2\2\0\4\2\1\12\3\67\1\12\1\0\33\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u013c\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\14\12\1\u013d\16\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u013e\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\14\12\1\u013f\16\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\u0140\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\15\12\1\u0141\15\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0142\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0143\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0144\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0145\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u0146\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\3\12\1\u0147\27\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u0148\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\11\12\1\u0149\21\12"+
    "\4\2\2\0\4\2\5\12\1\0\20\12\1\u014a\12\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\u014b\13\12"+
    "\4\2\2\0\4\2\5\12\1\0\30\12\1\u014c\1\u014d"+
    "\1\u014e\4\2\2\0\4\2\5\12\1\0\12\12\1\u014f"+
    "\20\12\4\2\2\0\4\2\5\12\1\0\6\12\1\u0150"+
    "\24\12\4\2\2\0\11\2\1\0\2\2\1\u0151\34\2"+
    "\2\0\11\2\1\0\22\2\1\u0152\14\2\2\0\11\2"+
    "\1\0\22\2\1\u0153\14\2\2\0\11\2\1\0\22\2"+
    "\1\u0154\14\2\2\0\11\2\1\0\2\2\1\u0155\34\2"+
    "\2\0\11\2\1\0\22\2\1\u0156\14\2\2\0\11\2"+
    "\1\0\22\2\1\u0157\14\2\2\0\11\2\1\0\22\2"+
    "\1\u0158\14\2\2\0\4\2\5\12\1\0\2\12\1\u0159"+
    "\30\12\4\2\2\0\4\2\5\12\1\0\2\12\1\u015a"+
    "\30\12\4\2\2\0\4\2\5\12\1\0\6\12\1\u015b"+
    "\24\12\4\2\2\0\4\2\5\12\1\0\1\12\1\u015c"+
    "\31\12\4\2\2\0\4\2\5\12\1\0\22\12\1\u015d"+
    "\10\12\4\2\2\0\4\2\5\12\1\0\6\12\1\u015e"+
    "\24\12\4\2\2\0\4\2\5\12\1\0\16\12\1\u015f"+
    "\14\12\4\2\2\0\4\2\5\12\1\0\14\12\1\u0160"+
    "\16\12\4\2\2\0\4\2\5\12\1\0\5\12\1\u0161"+
    "\25\12\4\2\2\0\4\2\5\12\1\0\22\12\1\u0162"+
    "\10\12\4\2\2\0\4\2\5\12\1\0\2\12\1\u0163"+
    "\30\12\4\2\2\0\4\2\5\12\1\0\24\12\1\u0164"+
    "\6\12\4\2\2\0\4\2\5\12\1\0\12\12\1\u0165"+
    "\20\12\4\2\2\0\4\2\5\12\1\0\32\12\1\u0166"+
    "\4\2\2\0\4\2\5\12\1\0\15\12\1\u0167\15\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0168\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\15\12\1\u0169\15\12"+
    "\4\2\2\0\4\2\5\12\1\0\25\12\1\u016a\5\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u016b\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\25\12\1\u016c\5\12"+
    "\4\2\2\0\4\2\5\12\1\0\24\12\1\u016d\6\12"+
    "\4\2\2\0\4\2\5\12\1\0\15\12\1\u016e\15\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u016f\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\u0170\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\23\12\1\u0171\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0172\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u0173\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u0174\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u0175\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\15\12\1\u0176\15\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u0177\17\12"+
    "\1\u0178\5\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\u0179\26\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\u017a\26\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u017b\30\12\4\2\2\0\4\2\5\12\1\0\15\12"+
    "\1\u017c\15\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\u017d\1\12\1\u017e\24\12\4\2\2\0\4\2\5\12"+
    "\1\0\15\12\1\u017f\15\12\4\2\2\0\4\2\5\12"+
    "\1\0\22\12\1\u0180\10\12\4\2\2\0\4\2\5\12"+
    "\1\0\12\12\1\u0181\20\12\4\2\2\0\4\2\5\12"+
    "\1\0\5\12\1\u0182\25\12\4\2\2\0\4\2\5\12"+
    "\1\0\17\12\1\u0183\13\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\u0184\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\27\12\1\67\3\12\4\2\2\0\4\2\5\12"+
    "\1\0\14\12\1\u0185\16\12\4\2\2\0\4\2\5\12"+
    "\1\0\1\12\1\u0186\31\12\4\2\2\0\11\2\1\0"+
    "\22\2\1\u0187\14\2\2\0\11\2\1\0\6\2\1\u0188"+
    "\30\2\2\0\11\2\1\0\22\2\1\u0189\14\2\2\0"+
    "\11\2\1\0\6\2\1\u018a\30\2\2\0\4\2\5\12"+
    "\1\0\17\12\1\u018b\13\12\4\2\2\0\4\2\5\12"+
    "\1\0\22\12\1\u018c\10\12\4\2\2\0\4\2\5\12"+
    "\1\0\32\12\1\u018d\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u018e\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\1\12\1\u018f\31\12\4\2\2\0\4\2\5\12\1\0"+
    "\17\12\1\u0190\13\12\4\2\2\0\4\2\5\12\1\0"+
    "\6\12\1\u0191\24\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u0192\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\17\12\1\u0193\13\12\4\2\2\0\4\2\5\12\1\0"+
    "\12\12\1\u0194\20\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u0195\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u0196\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\6\12\1\u0197\24\12\4\2\2\0\4\2\5\12\1\0"+
    "\11\12\1\u0198\21\12\4\2\2\0\4\2\5\12\1\0"+
    "\6\12\1\u0199\24\12\4\2\2\0\4\2\5\12\1\0"+
    "\22\12\1\u019a\10\12\4\2\2\0\4\2\5\12\1\0"+
    "\15\12\1\u019b\15\12\4\2\2\0\4\2\5\12\1\0"+
    "\22\12\1\u019c\10\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u019d\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\12\12\1\u019e\20\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u019f\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\15\12\1\u01a0\15\12\4\2\2\0\4\2\5\12\1\0"+
    "\20\12\1\u01a1\12\12\4\2\2\0\4\2\5\12\1\0"+
    "\4\12\1\u01a2\26\12\4\2\2\0\4\2\5\12\1\0"+
    "\1\12\1\u01a3\31\12\4\2\2\0\4\2\5\12\1\0"+
    "\14\12\1\u01a4\16\12\4\2\2\0\4\2\5\12\1\0"+
    "\1\12\1\u01a5\31\12\4\2\2\0\4\2\5\12\1\0"+
    "\26\12\1\u01a6\4\12\4\2\2\0\4\2\5\12\1\0"+
    "\17\12\1\u01a7\13\12\4\2\2\0\4\2\5\12\1\0"+
    "\20\12\1\67\12\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u01a8\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\24\12\1\u01a9\6\12\4\2\2\0\4\2\5\12\1\0"+
    "\30\12\1\u01aa\2\12\4\2\2\0\4\2\5\12\1\0"+
    "\12\12\1\u01ab\20\12\4\2\2\0\4\2\5\12\1\0"+
    "\6\12\1\u01ac\24\12\4\2\2\0\4\2\5\12\1\0"+
    "\23\12\1\u01ad\7\12\4\2\2\0\4\2\5\12\1\0"+
    "\12\12\1\u01ae\20\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u01af\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\14\12\1\u01b0\16\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u01b1\30\12\4\2\2\0\4\2\5\12\1\0"+
    "\1\12\1\u01b2\31\12\4\2\2\0\4\2\5\12\1\0"+
    "\22\12\1\u01b3\10\12\4\2\2\0\4\2\5\12\1\0"+
    "\12\12\1\u01b4\20\12\4\2\2\0\4\2\5\12\1\0"+
    "\2\12\1\u01b5\1\12\1\u01b6\2\12\1\u01b7\1\u01b8\1\12"+
    "\1\u01b9\2\12\1\u01ba\10\12\1\u01bb\4\12\4\2\2\0"+
    "\11\2\1\0\10\2\1\u01bc\26\2\2\0\11\2\1\0"+
    "\10\2\1\u01bd\26\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u01be\31\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u01bf\31\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\u01c0\13\12\4\2\2\0\4\2\5\12\1\0\25\12"+
    "\1\u01c1\5\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u01c2\22\12\1\u01c3\5\12\4\2\2\0\4\2\5\12"+
    "\1\0\1\12\1\u01c4\31\12\4\2\2\0\4\2\5\12"+
    "\1\0\3\12\1\u01c5\4\12\1\u01c6\11\12\1\u01c7\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u01c8\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u01c9\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u01ca\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\4\12\1\u01cb\26\12"+
    "\4\2\2\0\4\2\5\12\1\0\16\12\1\u01cc\14\12"+
    "\4\2\2\0\4\2\5\12\1\0\25\12\1\u01cd\5\12"+
    "\4\2\2\0\4\2\5\12\1\0\16\12\1\u01ce\14\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u01cf\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u01d0\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u01d1\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u01d2\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\10\12\1\u01d3\22\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u01d4\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\23\12\1\u01d5\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u01d6\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\14\12\1\u01d7\16\12"+
    "\4\2\2\0\4\2\5\12\1\0\24\12\1\u01d8\6\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\u01d9\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\4\12\1\u01da\23\12"+
    "\1\u01db\2\12\4\2\2\0\4\2\5\12\1\0\20\12"+
    "\1\u01dc\12\12\4\2\2\0\4\2\5\12\1\0\27\12"+
    "\1\u01dd\3\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\u01de\26\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u01df\20\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u01e0\10\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\u01e1\14\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\u01e2\26\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u01e3\10\12\4\2\2\0\4\2\5\12\1\0\5\12"+
    "\1\u01e4\25\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u01e5\20\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u01e6\10\12\4\2\2\0\4\2\5\12\1\0\15\12"+
    "\1\u01e7\15\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\u01e8\24\12\4\2\2\0\4\2\5\12\1\0\5\12"+
    "\1\u01e9\25\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\u01ea\7\12\1\u01eb\16\12\4\2\2\0\4\2\5\12"+
    "\1\0\2\12\1\u01ec\30\12\4\2\2\0\4\2\5\12"+
    "\1\0\12\12\1\u01ed\20\12\4\2\2\0\4\2\5\12"+
    "\1\0\6\12\1\u01ee\24\12\4\2\2\0\4\2\5\12"+
    "\1\0\16\12\1\u01ef\14\12\4\2\2\0\4\2\5\12"+
    "\1\0\6\12\1\u01f0\17\12\1\u01f1\4\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u01f2\13\12\4\2\2\0"+
    "\11\2\1\0\2\2\1\u01f3\34\2\2\0\11\2\1\0"+
    "\2\2\1\u01f4\34\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u01f5\30\12\4\2\2\0\4\2\5\12\1\0\20\12"+
    "\1\u01f6\12\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\u01f7\13\12\4\2\2\0\4\2\5\12\1\0\5\12"+
    "\1\u01f8\25\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u01f9\10\12\4\2\2\0\4\2\5\12\1\0\23\12"+
    "\1\u01fa\7\12\4\2\2\0\4\2\5\12\1\0\15\12"+
    "\1\u01fb\15\12\4\2\2\0\4\2\5\12\1\0\20\12"+
    "\1\u01fc\12\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u01fd\30\12\4\2\2\0\4\2\5\12\1\0\3\12"+
    "\1\u01fe\27\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u01ff\30\12\4\2\2\0\4\2\5\12\1\0\24\12"+
    "\1\u0200\6\12\4\2\2\0\4\2\5\12\1\0\5\12"+
    "\1\u0201\25\12\4\2\2\0\4\2\5\12\1\0\24\12"+
    "\1\u0202\6\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u0203\31\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u0204\10\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u0205\31\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u0206\31\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\u0207\13\12\4\2\2\0\4\2\5\12\1\0\3\12"+
    "\1\u0208\27\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u0209\31\12\4\2\2\0\4\2\5\12\1\0\4\12"+
    "\1\u020a\26\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u020b\30\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u020c\20\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\u020d\14\12\4\2\2\0\4\2\5\12\1\0\17\12"+
    "\1\u020e\13\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u020f\10\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\67\14\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u0210\30\12\4\2\2\0\4\2\5\12\1\0\26\12"+
    "\1\u0211\4\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u0212\30\12\4\2\2\0\4\2\5\12\1\0\24\12"+
    "\1\u0213\6\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u0214\30\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u0215\30\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u0216\30\12\4\2\2\0\4\2\5\12\1\0\5\12"+
    "\1\u0217\25\12\4\2\2\0\4\2\5\12\1\0\1\12"+
    "\1\u0218\31\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u0219\20\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\u021a\14\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u021b\30\12\4\2\2\0\4\2\5\12\1\0\2\12"+
    "\1\u021c\30\12\4\2\2\0\4\2\5\12\1\0\6\12"+
    "\1\u021d\24\12\4\2\2\0\4\2\5\12\1\0\15\12"+
    "\1\u021e\15\12\4\2\2\0\4\2\5\12\1\0\15\12"+
    "\1\u021f\15\12\4\2\2\0\4\2\5\12\1\0\22\12"+
    "\1\u0220\10\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u0221\20\12\4\2\2\0\4\2\5\12\1\0\16\12"+
    "\1\u0222\14\12\4\2\2\0\4\2\5\12\1\0\20\12"+
    "\1\u0223\12\12\4\2\2\0\4\2\5\12\1\0\12\12"+
    "\1\u0224\20\12\4\2\2\0\11\2\1\0\22\2\1\u0225"+
    "\14\2\2\0\11\2\1\0\22\2\1\u0226\14\2\2\0"+
    "\4\2\5\12\1\0\26\12\1\u0227\4\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0228\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u0229\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u022a\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u022b\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u022c\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u022d\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u022e\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u022f\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0230\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0231\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0232\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0233\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u0234\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0235\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\3\12\1\u0236\27\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u0237\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0238\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\26\12\1\u0239\4\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u023a\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\23\12\1\u023b\7\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u023c\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\u023d\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u023e\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u023f\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0240\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0241\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0242\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\14\12\1\u0243\16\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0244\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0245\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\21\12\1\u0246\11\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0247\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\u0248\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\5\12\1\u0249\25\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u024a\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u024b\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u024c\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u024d\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u024e\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\u024f\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\25\12\1\u0250\5\12\4\2\2\0"+
    "\4\2\5\12\1\0\20\12\1\u0251\12\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0252\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0253\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u0254\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u0255\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0256\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0257\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0258\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u0259\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\24\12\1\u025a\6\12\4\2\2\0"+
    "\4\2\5\12\1\0\23\12\1\u025b\7\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u025c\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u025d\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u025e\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u025f\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0260\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u0261\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u0262\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\23\12\1\u0263\7\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u0264\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0265\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u0266\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\31\12\1\u0267\1\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u0268\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u0269\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u026a\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u026b\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\5\12\1\u026c\25\12\4\2\2\0"+
    "\4\2\5\12\1\0\25\12\1\u026d\5\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u026e\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u026f\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u0270\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u0271\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\24\12\1\u0272\6\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0273\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0274\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\14\12\1\u0275\16\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0276\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\24\12\1\u0277\6\12\4\2\2\0"+
    "\4\2\5\12\1\0\24\12\1\u0278\6\12\4\2\2\0"+
    "\4\2\5\12\1\0\23\12\1\u0279\7\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u027a\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u027b\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\23\12\1\u027c\7\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u027d\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u027e\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u027f\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0280\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0281\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\25\12\1\u0282\5\12\4\2\2\0"+
    "\4\2\5\12\1\0\30\12\1\u0283\2\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u0284\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u0285\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0286\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u0287\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u0288\11\12\1\u0289\6\12"+
    "\4\2\2\0\4\2\5\12\1\0\23\12\1\u028a\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u028b\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\14\12\1\u028c\16\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u028d\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\u028e\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u028f\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0290\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u0291\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u0292\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u0293\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u0294\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u0295\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\u0296\13\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\u0297\13\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u0298\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u0299\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\16\12\1\u029a\14\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u029b\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\20\12\1\u029c\12\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u029d\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u029e\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u029f\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u02a0\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u02a1\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\23\12\1\u02a2\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u02a3\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\23\12\1\u02a4\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\16\12\1\u02a5\14\12"+
    "\4\2\2\0\4\2\5\12\1\0\4\12\1\u02a6\26\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u02a7\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u02a8\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u02a9\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\24\12\1\u02aa\6\12"+
    "\4\2\2\0\4\2\5\12\1\0\25\12\1\u02ab\5\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u02ac\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u02ad\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u02ae\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u02af\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\23\12\1\u02b0\7\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u02b1\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\13\12\1\u02b2\17\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\u02b3\13\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u02b4\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u02b5\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u02b6\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u02b7\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u02b8\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u02b9\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u02ba\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\14\12\1\u02bb\16\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\u02bc\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u02bd\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\12\12\1\u02be\20\12"+
    "\4\2\2\0\4\2\5\12\1\0\22\12\1\u02bf\10\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u02c0\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\u02c1\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\2\12\1\u02c2\30\12"+
    "\4\2\2\0\4\2\5\12\1\0\24\12\1\u02c3\6\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\u02c4\13\12"+
    "\4\2\2\0\4\2\5\12\1\0\17\12\1\u02c5\13\12"+
    "\4\2\2\0\4\2\5\12\1\0\1\12\1\u02c6\31\12"+
    "\4\2\2\0\4\2\5\12\1\0\15\12\1\u02c7\15\12"+
    "\4\2\2\0\4\2\5\12\1\0\6\12\1\u02c8\24\12"+
    "\4\2\2\0\4\2\5\12\1\0\5\12\1\u02c9\25\12"+
    "\4\2\2\0\4\2\5\12\1\0\32\12\1\u02ca\4\2"+
    "\2\0\4\2\5\12\1\0\16\12\1\u02cb\14\12\4\2"+
    "\2\0\4\2\5\12\1\0\32\12\1\u02cc\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u02cd\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\16\12\1\u02ce\14\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u02cf\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u02d0\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\5\12\1\u02d1\25\12\4\2\2\0"+
    "\4\2\1\12\1\u02d2\3\12\1\0\33\12\4\2\2\0"+
    "\4\2\5\12\1\0\15\12\1\u02d3\15\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02d4\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u02d5\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02d6\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\20\12\1\u02d7\12\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u02d8\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\4\12\1\u02d9\26\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02da\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02db\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02dc\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u02dd\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\1\12\1\u02de\31\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u02df\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u02e0\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\22\12\1\u02e1\10\12\4\2\2\0"+
    "\4\2\5\12\1\0\24\12\1\u02e2\6\12\4\2\2\0"+
    "\4\2\5\12\1\0\6\12\1\u02e3\24\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02e4\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u02e5\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02e6\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\24\12\1\u02e7\6\12\4\2\2\0"+
    "\4\2\5\12\1\0\17\12\1\u02e8\13\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02e9\30\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u02ea\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\12\12\1\u02eb\20\12\4\2\2\0"+
    "\4\2\5\12\1\0\10\12\1\u02ec\22\12\4\2\2\0"+
    "\4\2\5\12\1\0\2\12\1\u02ed\30\12\4\2\2\0"+
    "\4\2\1\u02ee\4\12\1\0\33\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u02ef\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u02f0\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u02f1\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\6\12\1\u02f2\24\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u02f3\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\24\12\1\u02f4\6\12\4\2\2\0\4\2"+
    "\5\12\1\0\1\12\1\u02f5\31\12\4\2\2\0\4\2"+
    "\5\12\1\0\15\12\1\u02f6\15\12\4\2\2\0\4\2"+
    "\5\12\1\0\24\12\1\u02f7\6\12\4\2\2\0\4\2"+
    "\5\12\1\0\1\12\1\u02f8\31\12\4\2\2\0\4\2"+
    "\5\12\1\0\12\12\1\u02f9\20\12\4\2\2\0\4\2"+
    "\5\12\1\0\15\12\1\u02fa\15\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u02fb\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u02fc\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\6\12\1\u02fd\24\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u02fe\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u02ff\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\20\12\1\u0300\12\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u0301\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0302\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u0303\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\23\12\1\u0304\7\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u0305\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0306\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u0307\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u0308\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\24\12\1\u0309\6\12\4\2\2\0\4\2"+
    "\5\12\1\0\12\12\1\u030a\20\12\4\2\2\0\4\2"+
    "\5\12\1\0\23\12\1\u030b\7\12\4\2\2\0\4\2"+
    "\5\12\1\0\12\12\1\u030c\20\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u030d\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u030e\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\15\12\1\u030f\15\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u0310\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u0311\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\15\12\1\u0312\15\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u0313\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\6\12\1\u0314\24\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0315\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u0316\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0317\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\24\12\1\u0318\6\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0319\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u031a\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\26\12\1\u031b\4\12\4\2\2\0\4\2"+
    "\5\12\1\0\16\12\1\u031c\14\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u031d\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\3\12\1\u031e\27\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u031f\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\6\12\1\u0320\24\12\4\2\2\0\4\2"+
    "\5\12\1\0\16\12\1\u0321\14\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u0322\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u0323\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\6\12\1\u0324\24\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u0325\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u0326\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0327\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\12\12\1\u0328\20\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0329\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\15\12\1\u032a\15\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u032b\13\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u032c\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u032d\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\12\12\1\u032e\20\12\4\2\2\0\4\2"+
    "\5\12\1\0\1\12\1\u032f\31\12\4\2\2\0\4\2"+
    "\5\12\1\0\20\12\1\u0330\12\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0331\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0332\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\2\12\1\u0333\30\12\4\2\2\0\4\2"+
    "\5\12\1\0\6\12\1\u0334\24\12\4\2\2\0\4\2"+
    "\5\12\1\0\1\12\1\u0335\31\12\4\2\2\0\4\2"+
    "\5\12\1\0\25\12\1\u0336\5\12\4\2\2\0\4\2"+
    "\5\12\1\0\22\12\1\u0337\10\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u0338\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\5\12\1\u0339\25\12\4\2\2\0\4\2"+
    "\5\12\1\0\15\12\1\u033a\15\12\4\2\2\0\4\2"+
    "\5\12\1\0\12\12\1\u033b\20\12\4\2\2\0\4\2"+
    "\5\12\1\0\17\12\1\u033c\13\12\2\2";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32035];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\7\1\1\11\u0333\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[828];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    // Código Java adicional se necessário


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.MSG, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 2:
            { /* ignora espaços */
            }
          // fall through
          case 96: break;
          case 3:
            { return new Symbol(sym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 4:
            { return new Symbol(sym.SEMICOLON, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 5:
            { return new Symbol(sym.ID, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 6:
            { return new Symbol(sym.LBRACE, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 7:
            { return new Symbol(sym.RBRACE, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 8:
            { /* ignora comentários */
            }
          // fall through
          case 102: break;
          case 9:
            { return new Symbol(sym.SKEY, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 10:
            { return new Symbol(sym.CL_COLOR, yyline, yycolumn);
            }
          // fall through
          case 104: break;
          case 11:
            { return new Symbol(sym.ECHO, yyline, yycolumn);
            }
          // fall through
          case 105: break;
          case 12:
            { return new Symbol(sym.ALIAS, yyline, yycolumn);
            }
          // fall through
          case 106: break;
          case 13:
            { return new Symbol(sym.R_FULLSCREEN_GAMMA, yyline, yycolumn);
            }
          // fall through
          case 107: break;
          case 14:
            { return new Symbol(sym.PLUS_USE, yyline, yycolumn);
            }
          // fall through
          case 108: break;
          case 15:
            { return new Symbol(sym.MINUS_USE, yyline, yycolumn);
            }
          // fall through
          case 109: break;
          case 16:
            { return new Symbol(sym.BIND, yyline, yycolumn);
            }
          // fall through
          case 110: break;
          case 17:
            { return new Symbol(sym.VIEWMODEL_FOV, yyline, yycolumn);
            }
          // fall through
          case 111: break;
          case 18:
            { return new Symbol(sym.PLUS_JUMP, yyline, yycolumn);
            }
          // fall through
          case 112: break;
          case 19:
            { return new Symbol(sym.MINUS_JUMP, yyline, yycolumn);
            }
          // fall through
          case 113: break;
          case 20:
            { return new Symbol(sym.CLEAR, yyline, yycolumn);
            }
          // fall through
          case 114: break;
          case 21:
            { return new Symbol(sym.PROFILE, yyline, yycolumn);
            }
          // fall through
          case 115: break;
          case 22:
            { return new Symbol(sym.HOST_WRITECONFIG, yyline, yycolumn);
            }
          // fall through
          case 116: break;
          case 23:
            { return new Symbol(sym.VIEWMODEL_OFFSET_X, yyline, yycolumn);
            }
          // fall through
          case 117: break;
          case 24:
            { return new Symbol(sym.VIEWMODEL_OFFSET_Y, yyline, yycolumn);
            }
          // fall through
          case 118: break;
          case 25:
            { return new Symbol(sym.VIEWMODEL_OFFSET_Z, yyline, yycolumn);
            }
          // fall through
          case 119: break;
          case 26:
            { return new Symbol(sym.PLUS_ATTACK, yyline, yycolumn);
            }
          // fall through
          case 120: break;
          case 27:
            { return new Symbol(sym.PLUS_SCORE, yyline, yycolumn);
            }
          // fall through
          case 121: break;
          case 28:
            { return new Symbol(sym.MINUS_ATTACK, yyline, yycolumn);
            }
          // fall through
          case 122: break;
          case 29:
            { return new Symbol(sym.MINUS_SCORE, yyline, yycolumn);
            }
          // fall through
          case 123: break;
          case 30:
            { return new Symbol(sym.CON_ENABLE, yyline, yycolumn);
            }
          // fall through
          case 124: break;
          case 31:
            { return new Symbol(sym.CL_HUD_COLOR, yyline, yycolumn);
            }
          // fall through
          case 125: break;
          case 32:
            { return new Symbol(sym.PLUS_DUCK, yyline, yycolumn);
            }
          // fall through
          case 126: break;
          case 33:
            { return new Symbol(sym.MINUS_DUCK, yyline, yycolumn);
            }
          // fall through
          case 127: break;
          case 34:
            { return new Symbol(sym.JOYSTICK, yyline, yycolumn);
            }
          // fall through
          case 128: break;
          case 35:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR, yyline, yycolumn);
            }
          // fall through
          case 129: break;
          case 36:
            { return new Symbol(sym.MM_DEDICATED_SEARCH_MAXPING, yyline, yycolumn);
            }
          // fall through
          case 130: break;
          case 37:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR_B, yyline, yycolumn);
            }
          // fall through
          case 131: break;
          case 38:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR_G, yyline, yycolumn);
            }
          // fall through
          case 132: break;
          case 39:
            { return new Symbol(sym.CL_CROSSHAIRCOLOR_R, yyline, yycolumn);
            }
          // fall through
          case 133: break;
          case 40:
            { return new Symbol(sym.SND_MUTE_MVP_MUSIC_LIVE_PLAYERS, yyline, yycolumn);
            }
          // fall through
          case 134: break;
          case 41:
            { return new Symbol(sym.HUD_SCALING, yyline, yycolumn);
            }
          // fall through
          case 135: break;
          case 42:
            { return new Symbol(sym.HUD_SHOWTARGETID, yyline, yycolumn);
            }
          // fall through
          case 136: break;
          case 43:
            { return new Symbol(sym.CL_CROSSHAIRDOT, yyline, yycolumn);
            }
          // fall through
          case 137: break;
          case 44:
            { return new Symbol(sym.CL_CROSSHAIR_RECOIL, yyline, yycolumn);
            }
          // fall through
          case 138: break;
          case 45:
            { return new Symbol(sym.SND_MVP_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 139: break;
          case 46:
            { return new Symbol(sym.PLUS_RELOAD, yyline, yycolumn);
            }
          // fall through
          case 140: break;
          case 47:
            { return new Symbol(sym.MINUS_RELOAD, yyline, yycolumn);
            }
          // fall through
          case 141: break;
          case 48:
            { return new Symbol(sym.CL_USE_OPENS_BUY_MENU, yyline, yycolumn);
            }
          // fall through
          case 142: break;
          case 49:
            { return new Symbol(sym.SND_HEADPHONE_EQ, yyline, yycolumn);
            }
          // fall through
          case 143: break;
          case 50:
            { return new Symbol(sym.CL_CROSSHAIRSTYLE, yyline, yycolumn);
            }
          // fall through
          case 144: break;
          case 51:
            { return new Symbol(sym.CL_RADAR_ROTATE, yyline, yycolumn);
            }
          // fall through
          case 145: break;
          case 52:
            { return new Symbol(sym.SND_MENUMUSIC_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 146: break;
          case 53:
            { return new Symbol(sym.SND_VOIPVOLUME, yyline, yycolumn);
            }
          // fall through
          case 147: break;
          case 54:
            { return new Symbol(sym.SND_MIXAHEAD, yyline, yycolumn);
            }
          // fall through
          case 148: break;
          case 55:
            { return new Symbol(sym.CL_SHOWLOADOUT, yyline, yycolumn);
            }
          // fall through
          case 149: break;
          case 56:
            { return new Symbol(sym.CL_TEAMID_OVERHEAD_MODE, yyline, yycolumn);
            }
          // fall through
          case 150: break;
          case 57:
            { return new Symbol(sym.SPEC_SHOW_XRAY, yyline, yycolumn);
            }
          // fall through
          case 151: break;
          case 58:
            { return new Symbol(sym.CL_HUD_RADAR_SCALE, yyline, yycolumn);
            }
          // fall through
          case 152: break;
          case 59:
            { return new Symbol(sym.CL_CROSSHAIRSIZE, yyline, yycolumn);
            }
          // fall through
          case 153: break;
          case 60:
            { return new Symbol(sym.VOLUME, yyline, yycolumn);
            }
          // fall through
          case 154: break;
          case 61:
            { return new Symbol(sym.CL_CROSSHAIR_DRAWOULINE, yyline, yycolumn);
            }
          // fall through
          case 155: break;
          case 62:
            { return new Symbol(sym.SENSITIVITY, yyline, yycolumn);
            }
          // fall through
          case 156: break;
          case 63:
            { return new Symbol(sym.CL_CROSSHAIRTHICKNESS, yyline, yycolumn);
            }
          // fall through
          case 157: break;
          case 64:
            { return new Symbol(sym.ENGINE_LOW_LATENCY_SLEEP_AFTER_CLIENT_TICK, yyline, yycolumn);
            }
          // fall through
          case 158: break;
          case 65:
            { return new Symbol(sym.CL_ALLOW_ANIMATED_AVATARS, yyline, yycolumn);
            }
          // fall through
          case 159: break;
          case 66:
            { return new Symbol(sym.VIEWMODEL_PRESETPOS, yyline, yycolumn);
            }
          // fall through
          case 160: break;
          case 67:
            { return new Symbol(sym.CL_JOIN_ADVERTISE, yyline, yycolumn);
            }
          // fall through
          case 161: break;
          case 68:
            { return new Symbol(sym.BATTERY_SAVER, yyline, yycolumn);
            }
          // fall through
          case 162: break;
          case 69:
            { return new Symbol(sym.CL_CROSSHAIRGAP, yyline, yycolumn);
            }
          // fall through
          case 163: break;
          case 70:
            { return new Symbol(sym.R_SHOW_BUILD_INFO, yyline, yycolumn);
            }
          // fall through
          case 164: break;
          case 71:
            { return new Symbol(sym.CL_SILENCER_MODE, yyline, yycolumn);
            }
          // fall through
          case 165: break;
          case 72:
            { return new Symbol(sym.CL_TEAMMATE_COLORS_SHOW, yyline, yycolumn);
            }
          // fall through
          case 166: break;
          case 73:
            { return new Symbol(sym.UI_STEAM_OVERLAY_NOTIFICATION_POSITION, yyline, yycolumn);
            }
          // fall through
          case 167: break;
          case 74:
            { return new Symbol(sym.SND_SPATIALIZE_LERP, yyline, yycolumn);
            }
          // fall through
          case 168: break;
          case 75:
            { return new Symbol(sym.SND_TENSECONDWARNING_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 169: break;
          case 76:
            { return new Symbol(sym.SND_ROUNDEND_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 170: break;
          case 77:
            { return new Symbol(sym.CL_SNIPER_AUTO_REZOOM, yyline, yycolumn);
            }
          // fall through
          case 171: break;
          case 78:
            { return new Symbol(sym.CL_RADAR_ALWAYS_CENTERED, yyline, yycolumn);
            }
          // fall through
          case 172: break;
          case 79:
            { return new Symbol(sym.ZOOM_SENSITIVITY_RATIO, yyline, yycolumn);
            }
          // fall through
          case 173: break;
          case 80:
            { return new Symbol(sym.CL_RADAR_SQUARE_WITH_SCOREBOARD, yyline, yycolumn);
            }
          // fall through
          case 174: break;
          case 81:
            { return new Symbol(sym.CL_CROSSHAIRALPHA, yyline, yycolumn);
            }
          // fall through
          case 175: break;
          case 82:
            { return new Symbol(sym.SND_ROUNDACTION_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 176: break;
          case 83:
            { return new Symbol(sym.CL_SCOREBOARD_MOUSE_ENABLE_BINDING, yyline, yycolumn);
            }
          // fall through
          case 177: break;
          case 84:
            { return new Symbol(sym.CL_TEAMID_OVERHEAD_COLORS_SHOW, yyline, yycolumn);
            }
          // fall through
          case 178: break;
          case 85:
            { return new Symbol(sym.CL_CROSSHAIR_SNIPER_WIDTH, yyline, yycolumn);
            }
          // fall through
          case 179: break;
          case 86:
            { return new Symbol(sym.SND_DEATHCAMERA_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 180: break;
          case 87:
            { return new Symbol(sym.CL_CROSSHAIR_OUTLINETHICKNESS, yyline, yycolumn);
            }
          // fall through
          case 181: break;
          case 88:
            { return new Symbol(sym.CL_RADAR_SCALE, yyline, yycolumn);
            }
          // fall through
          case 182: break;
          case 89:
            { return new Symbol(sym.R_PLAYER_VISIBILITY_MODE, yyline, yycolumn);
            }
          // fall through
          case 183: break;
          case 90:
            { return new Symbol(sym.SND_ROUNDSTART_VOLUME, yyline, yycolumn);
            }
          // fall through
          case 184: break;
          case 91:
            { return new Symbol(sym.CL_CROSSHAIRGAP_USEWEAPONVALUE, yyline, yycolumn);
            }
          // fall through
          case 185: break;
          case 92:
            { return new Symbol(sym.CL_SNIPER_DELAY_UNSCOPE, yyline, yycolumn);
            }
          // fall through
          case 186: break;
          case 93:
            { return new Symbol(sym.CL_DM_BUYRANDOMWEAPONS, yyline, yycolumn);
            }
          // fall through
          case 187: break;
          case 94:
            { return new Symbol(sym.SND_STEAMAUDIO_ENABLE_PERSPECTIVE_CORRECTION, yyline, yycolumn);
            }
          // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
